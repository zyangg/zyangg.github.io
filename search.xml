<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Router-keep-alive</title>
    <url>/2020/03/14/Router-keep-alive/</url>
    <content><![CDATA[<h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p> keep-alive是Vue提供的一个抽象组件，用来对组件进行缓存，从而节省性能，由于是一个抽象组件，所以在v页面渲染完毕后不会被渲染成一个DOM元素</p>
<a id="more"></a> 

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//在 home.vue 页面添加两个生命函数</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 声生命函数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name:<span class="string">'home'</span>,</span></span><br><span class="line">        created()&#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// document.title="首页"</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"home 被创建啦 ^_^"</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed()&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"home 被销毁了 o(╥﹏╥)o"</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>其实 keep-alive 的使用很简单。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- index.js 页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"HomeClick"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"AboutClick"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"UserClick"</span>&gt;</span>用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"ProfileClick"</span>&gt;</span>档案<span class="tag">&lt;/<span class="name">button</span>&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>




<h3 id="activated-deactivated-生命函数"><a href="#activated-deactivated-生命函数" class="headerlink" title="activated / deactivated 生命函数"></a>activated / deactivated 生命函数</h3><h5 id="①-定义"><a href="#①-定义" class="headerlink" title="① 定义"></a>① 定义</h5><p>  activated，译为“活跃”的，也就是当组件处于活跃状态时将会回调的生命函数。相反，deactivated就是组件处于不活跃的状态。</p>
<h5 id="②-使用场景"><a href="#②-使用场景" class="headerlink" title="② 使用场景"></a>② 使用场景</h5><p>  但是这两个生命函数并不是所有的场景都使用的。只有<strong>使用了 keep-alive 时才可以使用。</strong></p>
<h5 id="③-应用场景"><a href="#③-应用场景" class="headerlink" title="③ 应用场景"></a>③ 应用场景</h5><p>  这里主要用 activated 函数解决上面的bug，此外我们还需要另外一个工具：beforeRouteLeave。beforeRouteLeave 是导航守卫之一，意思就是在监听离开路由时的事情。<br> <strong>第一：删除嵌套路由</strong><br>  bug 的产生是因为一开始在 home 的地址中就有嵌套的路由，即 URL 的地址不仅仅是 /home 而是/home/news 或者 /home/message 。所以我们要先对嵌套的路由进行处理。打开 index.js 在路由映射关系中有关嵌套路由的代码 children 内部删除注释掉的代码：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path:<span class="string">'/h ome'</span>,</span><br><span class="line">    component:Home,</span><br><span class="line">    meta:&#123;</span><br><span class="line">            title:<span class="string">'首页'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    children:[</span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//  path:"",</span></span><br><span class="line">        <span class="comment">//  redirect:"new"</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">"new"</span>,</span><br><span class="line">            component:HomeNews,</span><br><span class="line">    &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">            path:<span class="string">"message"</span>,</span><br><span class="line">            component:HomeMessage,</span><br><span class="line">    &#125;   </span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><strong>第二：获取相关路径</strong><br>  既然我们不能在嵌套路由中使用类似“/home/new” 的路径，我们就先<strong>定义一个变量path 来存放在嵌套路由中的路径“/home/new”；</strong><br>  然后使用 <strong>activated</strong> 生命函数，当 home 页面被激活的时候获取当前激活状态下的路径；<br>  最后使用 <strong>beforeRouteLeave</strong> 导航守卫，记录用户离开页面时的路径，并将该路径赋值给变量path，这样当用户再次进入到该页面时，就会使用离开后的路径。具体代码如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// home.vue 文件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name:<span class="string">'home'</span>,</span></span><br><span class="line">        data ()&#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    path:<span class="string">'/home/new'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created()&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.title=<span class="string">"首页"</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"home 被创建啦 ^_^"</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed()&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"home 被销毁了 o(╥﹏╥)o"</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        activated() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$router.push(<span class="keyword">this</span>.path)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        beforeRouteLeave(to,<span class="keyword">from</span>,next)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.path = <span class="keyword">this</span>.$route.path;</span></span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="1-keepl-alive"><a href="#1-keepl-alive" class="headerlink" title="1.keepl-alive"></a>1.keepl-alive</h4><p>  当用户离开某个组件的时候，不要让该组件频繁的被创建和频繁的被销毁</p>
<h4 id="2-activeted-和-dectivated"><a href="#2-activeted-和-dectivated" class="headerlink" title="2.activeted 和 dectivated"></a>2.activeted 和 dectivated</h4><p>  译为“活跃的/不活跃的”这两个生命函数只有在使用了keep-alive 才可以使用</p>
<p>利用include、exclude属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">"bookLists,bookLists"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">exclude</span>=<span class="string">"indexLists"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>include属性表示只有name属性为bookLists，bookLists的组件会被缓存，（注意是组件的名字，不是路由的名字）其它组件不会被缓存exclude属性表示除了name属性为indexLists的组件不会被缓存，其它组件都会被缓存</p>
<p>利用meta属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>[</span><br><span class="line"> &#123;</span><br><span class="line">  path:<span class="string">'/'</span>,</span><br><span class="line">  name:<span class="string">'home'</span>,</span><br><span class="line">  components:Home,</span><br><span class="line">  meta:&#123;</span><br><span class="line">    keepAlive:<span class="literal">true</span> <span class="comment">//需要被缓存的组件</span></span><br><span class="line"> &#125;,</span><br><span class="line"> &#123;</span><br><span class="line">  path:<span class="string">'/book'</span>,</span><br><span class="line">  name:<span class="string">'book'</span>,</span><br><span class="line">  components:Book,</span><br><span class="line">  meta:&#123;</span><br><span class="line">     keepAlive:<span class="literal">false</span> <span class="comment">//不需要被缓存的组件</span></span><br><span class="line"> &#125; </span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">"this.$route.meat.keepAlive"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这里是会被缓存的组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">v-if</span>=<span class="string">"!this.$router.meta.keepAlive"</span>&gt;</span><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里是不会被缓存的组件--&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Router</tag>
      </tags>
  </entry>
  <entry>
    <title>Router导航守卫</title>
    <url>/2020/03/13/Router%E5%AF%BC%E8%88%AA%E5%AE%88%E5%8D%AB/</url>
    <content><![CDATA[<h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><p> 导航守卫主要是<strong>监听路由跳转的过程</strong>。比如：<br>  我们都知道HTML中有上图这么一个标题。需求是当用户点击“首页”，标题就变成“首页”；当用户点击“关于”，标题就变成“关于”。目前有两种实现的办法，下面我们分别来看看这两种办法是如何实现的。</p>
<a id="more"></a>

<h4 id="①-生命函数"><a href="#①-生命函数" class="headerlink" title="① 生命函数"></a>① 生命函数</h4><p>  目前我们常用的生命函数主要有三大类，分别是：<strong>created、mounted、updated</strong>。<br> <strong>created</strong>：是在<strong>组件被创建</strong>的时候会回调的函数，然后执行该函数内的内容；<br> <strong>mounted</strong>：当<strong>组件的模板被挂载到DOM</strong>上时就会回调该函数，执行函数内相关的操作；<br> <strong>updated</strong>：只要<strong>页面发生刷新</strong>的时候就会回调该函数从而执行函数内的代码块。<br> 对于上面的需求，可以使用 created 函数来实现。具体代码见下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name:<span class="string">'home'</span>,</span></span><br><span class="line">        created()&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.title=<span class="string">"首页"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  在 home.vue 页面中添加 created 函数，当组件 home 创建的时候就将标题修改成 “首页”。其余的 “用户” 页面、“关于”页面、“档案”页面也是以此类推，</p>
<p>  但是该方法不足的地方就是：太繁琐啦！我只是想根据导航栏然后修改标题，你就在四个页面都添加了 created 函数</p>
<h3 id="导航守卫使用"><a href="#导航守卫使用" class="headerlink" title="导航守卫使用"></a>导航守卫使用</h3><p>导航守卫就是监听路由的跳转。所以使用的使用分成以下两步：<br> 第一：<strong>使用 beforeEach 确定跳转变化</strong><br> 第二：<strong>使用 meta 确定路由跳转变化时要修改的内容</strong></p>
<h5 id="①-使用-beforeEach-确定跳转变化"><a href="#①-使用-beforeEach-确定跳转变化" class="headerlink" title="①  使用 beforeEach 确定跳转变化"></a>①  使用 beforeEach 确定跳转变化</h5><p>  首先在 router 中有个叫 <strong>beforeEach</strong>  的函数，当我们查看源码时会发现它需要传入一个叫 guard 的 <strong>NavigationGuard 参数</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>这里，将 beforeEach 的参数写成箭头函数的形式，接下来就是添加函数内部的代码。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title=to.title</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p> </p>
<h5 id="②-使用-meta-确定跳转变化的内容"><a href="#②-使用-meta-确定跳转变化的内容" class="headerlink" title="② 使用 meta 确定跳转变化的内容"></a>② 使用 meta 确定跳转变化的内容</h5><p>其实meta 很简单，就在路由的配置中添加上下面的代码就可以了，你看：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">            <span class="attribute">path</span>:<span class="string">'/profile'</span>,</span><br><span class="line">            component:Profile,</span><br><span class="line">            meta:&#123;</span><br><span class="line">                title:<span class="string">'档案'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>


<p>发现获取不到mete,是因为路由地址有嵌套路由发生了错误，所以我们可以打印一下该路由</p>
<p> <img src="https://img-blog.csdnimg.cn/20200515181728269.png" alt="img"> </p>
<p>  发现 meta 并没有任何东西，但是在，说明我们获取title的时候不应该用 to.title 而应该用 to.matched[0].mate.title 。所以结合上面两步给出的完整代码应该是这样子的：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">""</span>,</span><br><span class="line">            redirect:<span class="string">'/home'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/home'</span>,</span><br><span class="line">            component:Home,</span><br><span class="line"><span class="comment">//使用 meta 确定路由跳转时要修改的值</span></span><br><span class="line">            meta:&#123;</span><br><span class="line">                title:<span class="string">'首页'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            children:[</span><br><span class="line">                &#123;</span><br><span class="line">                    path:<span class="string">""</span>,</span><br><span class="line">                    redirect:<span class="string">"new"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    path:<span class="string">"new"</span>,</span><br><span class="line">                    component:HomeNews,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    path:<span class="string">"message"</span>,</span><br><span class="line">                    component:HomeMessage,</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/about'</span>,</span><br><span class="line">            component:About,</span><br><span class="line">            meta:&#123;</span><br><span class="line">                title:<span class="string">'关于'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/user/:userID'</span>,</span><br><span class="line">            component:User,</span><br><span class="line">            meta:&#123;</span><br><span class="line">                title:<span class="string">'用户'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/profile'</span>,</span><br><span class="line">            component:Profile,</span><br><span class="line">            meta:&#123;</span><br><span class="line">                title:<span class="string">'档案'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//使用 beforeEach 函数确定转换</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title=to.matched[<span class="number">0</span>].meta.title</span><br><span class="line">    <span class="built_in">console</span>.log(to)</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="后置钩子"><a href="#后置钩子" class="headerlink" title="后置钩子"></a>后置钩子</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.afterEach(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Router</tag>
      </tags>
  </entry>
  <entry>
    <title>Router的基本使用</title>
    <url>/2020/03/12/Router%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="路由安装和配置"><a href="#路由安装和配置" class="headerlink" title="路由安装和配置"></a>路由安装和配置</h1><h4 id="1-安装路由"><a href="#1-安装路由" class="headerlink" title="1.安装路由"></a>1.安装路由</h4><p>  有两种方式，一是通过<strong>命令 npm install vue-router –save</strong>安装，二是在<strong>创建项目</strong>的时候就选择安装路由</p>
<p>  当安装完成后，会在src文件夹下默认创建 router 文件夹，router文件夹下又会自动创建 index.js文件。</p>
<a id="more"></a>

<p> <img src="https://img-blog.csdnimg.cn/20200515162309660.png" alt="在这里插入图片描述"> </p>
<h4 id="2-使用路由的步骤"><a href="#2-使用路由的步骤" class="headerlink" title="2.使用路由的步骤"></a>2.使用路由的步骤</h4><p>  这里主要分成四步：① 导入路由插件  ② 使用路由插件  ③创建路由对象  ④使用路由对象<br> <strong>① 导入路由插件</strong><br> 在通过npm安装好路由之后，如果想真正的使用，首先肯定是导入路由啦。在router文件夹下的index.js文件写入下面的代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br></pre></td></tr></table></figure>

<p><strong>② 使用路由插件</strong><br>  导入好的路由并不能直接使用，必须通过<strong>Vue.use()</strong>才可以使用。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Vue</span><span class="selector-class">.use</span>(<span class="selector-tag">VueRouter</span>)</span><br></pre></td></tr></table></figure>

<p><strong>③ 创建路由对象</strong><br>  和创建Vue实例一样的创建方法，值得注意的是这里的<strong>routes</strong>属性</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="comment">// 负责URL和页面的映射关系</span></span><br><span class="line">    routes:[</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>④ 使用路由对象</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先得在index.js文件导出路由</span></span><br><span class="line"><span class="keyword">export</span>  <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>



<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//然后在main.js文件使用路由</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>为什么导入路由的路径是 ./router 而不是 ./router/index.js 。因为在执行的时候，会<strong>默认先执行index的文件</strong>，所以写不写index的效果是一样的。</p>
<h4 id="编写路由映射关系"><a href="#编写路由映射关系" class="headerlink" title="编写路由映射关系"></a>编写路由映射关系</h4><h5 id="1-创建路由组件"><a href="#1-创建路由组件" class="headerlink" title="1.创建路由组件"></a>1.创建路由组件</h5><p>因为映射关系是映射页面和URL的关系，所以我们得先准备好页面。<br> 创建 home.vue 和 about.vue文件，然后在该文件中书写相关的内容</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//about.vue文件内容</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;关于&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span&gt;在这里你可以问到任何你想问的问题&lt;/</span>span&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">    h1&#123;</span></span><br><span class="line"><span class="regexp">        color: aquamarine;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//home.vue文件内容</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;首页&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span&gt;我是首页&lt;/</span>span&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">    h1&#123;</span></span><br><span class="line"><span class="regexp">        color: red;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<h5 id="2-配置路由映射关系"><a href="#2-配置路由映射关系" class="headerlink" title="2.配置路由映射关系"></a>2.配置路由映射关系</h5><p>  routes主要放两个东西：<strong>路径 path + 组件 component</strong>。每一个映射关系就是一个对象，所以我们可以这样写：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.导入</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'../components/home.vue'</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">'../components/about.vue'</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="comment">// 负责URL和页面的映射关系</span></span><br><span class="line">    routes:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/home'</span>,</span><br><span class="line">            component:Home</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/about'</span>,</span><br><span class="line">            component:About</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.导出路由</span></span><br><span class="line"><span class="keyword">export</span>  <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<p>  当页面的地址中有 “/home ”就显示home相关的页面；当页面的地址中有 “/about ”就显示about相关的页面.</p>
<h5 id="3-使用路由"><a href="#3-使用路由" class="headerlink" title="3.使用路由"></a>3.使用路由</h5><p>  页面和URL的映射关系已经建立好了，但是得要有东西来触发它们真正起作用，所以就涉及到另外两个重要的标签： router-link 和router-view<br> <strong>① router-link：</strong>是vue-router 中已经注册过多的组件，其功能类似于a标签，<strong>点击到文字就跳转到相应的页面</strong>。<br> <strong>② router-view：</strong>它的作用就是决定<strong>页面的显示</strong>。<br> 比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在App.vue文件中写入上面的代码，结果如下图所示：</p>
<p> <img src="https://img-blog.csdnimg.cn/2020051516255867.png" alt="img"> </p>
<h4 id="路由的默认路径"><a href="#路由的默认路径" class="headerlink" title="路由的默认路径"></a>路由的默认路径</h4><p>redirect又叫重定向，意思是当path为空的时候，就跳转到redirect指定的路径。<br> 比如：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="comment">// 负责URL和页面的映射关系</span></span><br><span class="line">    routes:[</span><br><span class="line">    <span class="comment">//路由的默认路径</span></span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">""</span>,</span><br><span class="line">            redirect:<span class="string">'/home'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/home'</span>,</span><br><span class="line">            component:Home</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/about'</span>,</span><br><span class="line">            component:About</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p> 当路径为空的时候，我们就跳转到‘/home’路径下，然后根据映射关系，跳转到/home路径下就显示首页的内容。 </p>
<p>在创建router对象的时候添加多一个属性： mode：history</p>
<p>将hash模式变成history模式</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="comment">// 负责URL和页面的映射关系</span></span><br><span class="line">    routes:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">""</span>,</span><br><span class="line">            redirect:<span class="string">'/home'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/home'</span>,</span><br><span class="line">            component:Home</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/about'</span>,</span><br><span class="line">            component:About</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    ],</span><br><span class="line">    mode:<span class="string">'history'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="router-link补充"><a href="#router-link补充" class="headerlink" title="router-link补充"></a>router-link补充</h4><p><strong>① tag：指定 router-link 被渲染成什么组件。</strong><br>  router-link 默认被渲染成 a标签，如果你想要渲染成别的标签，添加 tag 属性即可，具体用法如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home"</span> <span class="attr">tag</span>=<span class="string">"button"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span> <span class="attr">tag</span>=<span class="string">"button"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <strong>② to ：指定跳转的路径。</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  </p>
<p><strong>③ replace：不会留下历史记录，即点击后退键不会返回到上一个页面中。</strong><br>  router-link 默认是采用 pushState 的方式保留历史记录，如果在某些特殊的情况下不允许用户点来点去就乐意添加该属性。用法如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home"</span> <span class="attr">replace</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span> <span class="attr">replace</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <strong>④ activeClass：激活状态。</strong>  意思是当 router-link 对应的路由匹配成功时，会自动给当前元素设置一个叫router-link-actice的class，设置active-class 可以修改默认的名称。用法如下：</p>
<p><strong>4.1 单一书写</strong> 这种写法是直接嵌套在标签内部，比如：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">"/home"</span> tag=<span class="string">"button"</span> replace active-<span class="keyword">class</span>=<span class="string">"warp"</span>&gt;首页&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=<span class="string">"/about"</span> tag=<span class="string">"button"</span> replace active-<span class="keyword">class</span>=<span class="string">"warp"</span>&gt;关于&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

<p><strong>4.2 批量书写</strong> 通过在router 对象添加属性 linkActiveClass 。比如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line"><span class="comment">// 负责URL和页面的映射关系</span></span><br><span class="line">    routes:[</span><br><span class="line">    linkActiveClass:<span class="string">"warp"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="编程式导航跳转路由"><a href="#编程式导航跳转路由" class="headerlink" title="编程式导航跳转路由"></a>编程式导航跳转路由</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p><strong>① 绑定事件</strong><br>  绑定事件的对象是需要路由跳转的地方，比如点击 “首页” 就跳转到 “/home”页面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"homeClick"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"aboutClick"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>② 添加  this.$router属性</strong><br> 在导出路由对象的地方添加属性如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'App'</span>,</span></span><br><span class="line">  methods:&#123;</span><br><span class="line">      homeClick()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$router.push(<span class="string">'./home'</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      aboutClick()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$router.push(<span class="string">'./about'</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Router</tag>
      </tags>
  </entry>
  <entry>
    <title>Router懒加载和参数传递</title>
    <url>/2020/03/13/Router%E6%87%92%E5%8A%A0%E8%BD%BD%E5%92%8C%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</url>
    <content><![CDATA[<h1 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h1><h4 id="1-原因回顾"><a href="#1-原因回顾" class="headerlink" title="1.原因回顾"></a>1.原因回顾</h4><p>  上面已经提及到，当我们把所有的文件都打包到 bound.js 文件夹下，该文件夹就会变得很大，加载缓慢。如果我们<strong>把不同路由对应的组件分割成不同的代码块，分别打包，当路由被访问时才加载相应的组件</strong>，就变得高效起来。</p>
<a id="more"></a>


<h4 id="2-路由懒加载做了什么？"><a href="#2-路由懒加载做了什么？" class="headerlink" title="2.路由懒加载做了什么？"></a>2.路由懒加载做了什么？</h4><p>① 将路由对应的组件<strong>打包</strong>成一个个的 <strong>js 代码块</strong><br> ② 只有在这个路由<strong>被访问</strong>的时候<strong>才加载对应的组件</strong>。</p>
<h4 id="3-懒加载的方式"><a href="#3-懒加载的方式" class="headerlink" title="3.懒加载的方式"></a>3.懒加载的方式</h4><p><strong>① 结合 vue 的异步组件和Webpack 的代码分析</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Home  = resolve =&gt; &#123; <span class="keyword">require</span>.ensure([ <span class="string">'../components/Home.vue'</span>],() =&gt; &#123; resolve(<span class="keyword">require</span>(<span class="string">'../components/Home.vue'</span><span class="string">'))&#125;)&#125;;</span></span><br></pre></td></tr></table></figure>


<p> <strong>② AMD写法</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> About = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'../components/About.vue'</span>],resolve);</span><br></pre></td></tr></table></figure>

<p>啊？还不会 (⊙_⊙)?？没关系~小编还会最后的杀手锏<br> <strong>③ 箭头函数</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span> (<span class="string">'../components/Home.vue'</span>)</span><br></pre></td></tr></table></figure>

<p>下面小编用方法③结合我们的程序跑一下呗</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在index.js 文件修改</span></span><br><span class="line"><span class="comment">//1.导入</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span> (<span class="string">'../components/home.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> About = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span> (<span class="string">'../components/about.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> User = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span> (<span class="string">'../components/user.vue'</span>)</span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="comment">// 负责URL和页面的映射关系</span></span><br><span class="line">    routes:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">""</span>,</span><br><span class="line">            redirect:<span class="string">'/home'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/home'</span>,</span><br><span class="line">            component:Home</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/about'</span>,</span><br><span class="line">            component:About</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/user/:userID'</span>,</span><br><span class="line">            component:User</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    ],</span><br><span class="line">    mode:<span class="string">'history'</span>,</span><br><span class="line">    linkActiveClass:<span class="string">"warp"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.导出路由</span></span><br><span class="line"><span class="keyword">export</span>  <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><p>  传递参数主要有两种类型： params 和 query 。其中 params 就是动态路由。</p>
<h4 id="1-params"><a href="#1-params" class="headerlink" title="1.params"></a>1.params</h4><p>主要分成下面三个步骤：<br> <strong>① 配置路由格式</strong><br>  说白了就是在 routes 映射关系中的 path 后面添加多一个变量，该变量就是要传递的参数。<br> 比如：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="comment">// 负责URL和页面的映射关系</span></span><br><span class="line">    routes:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">""</span>,</span><br><span class="line">            redirect:<span class="string">'/home'</span></span><br><span class="line">        &#125;,      </span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/user/:userID'</span>,</span><br><span class="line">            component:User</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>  我们希望在“user” 页面的URL中添加上用户的ID。所以在 routes 的 path 中添加了userID 变量，该变量就是想要传递的参数</p>
<p><strong>② 给参数赋值</strong><br>  上面一步我们已经为路由的路径后面添加多了userID 参数，接下来我们就要为这个参数赋值。<br> 在路由对象的 data 中声明该变量并且为变量赋值。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'App'</span>,</span></span><br><span class="line">  data ()&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">          userID:<span class="string">"李四"</span></span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  我们希望用户“李四” 登陆系统后能将他的ID传递到用户页面的URL中。所以为 userID 赋值为 “lisi”。</p>
<p><strong>③ 显示变量</strong><br> 上面一步我们已经有了数据，接下来就是将该数据显示在用户页面的URL中。<br>  使用<strong>计算属性</strong>重新定义一个变量，然后通过<strong>$route 获取原来变量的值并返回给新的变量</strong>。最后一定要记得，在 <strong>route-link 标签的 to 属性也要添加上该变量</strong>，否则不能成功跳转页面。比如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示数据的模板</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;router-link to=<span class="string">"/home"</span> tag=<span class="string">"button"</span> replace&gt;首页&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">        &lt;router-link to="/</span>about<span class="string">" tag="</span>button<span class="string">" replace&gt;关于&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">        &lt;router-link :to="</span><span class="string">'/user/'</span>+userID<span class="string">"tag="</span>button<span class="string">" &gt;用户&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">        &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;&#123;&#123;userid&#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;&#123;&#123;$route.params.userID&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;  </span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//路由配置</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">  name: 'App',</span></span><br><span class="line"><span class="string">  data ()&#123;</span></span><br><span class="line"><span class="string">      return &#123;</span></span><br><span class="line"><span class="string">          userID:"</span>李四<span class="string">"</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string"> computed:&#123;</span></span><br><span class="line"><span class="string">      userid()&#123;</span></span><br><span class="line"><span class="string">          return this.$route.params.userID</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>  在该例子中，定义了新的变量 userid，然后通过 route.params.userID获取了userID的值，最后在模板中显示如下：</p>
<h4 id="2-query-类型"><a href="#2-query-类型" class="headerlink" title="2.query 类型"></a>2.query 类型</h4><p>  在进行正式配置之前，我们要准备前期的工作，重新创建一个 profile.vue 组件。<br> 我们通过 query 传递参数的时候，也可以大概分成下面三步：<br> <strong>① 配置路由</strong><br> 这个配置路由的方式就是跟往常配置路由的方式是一样的。比如：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="comment">// 负责URL和页面的映射关系</span></span><br><span class="line">    routes:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">""</span>,</span><br><span class="line">            redirect:<span class="string">'/home'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/about'</span>,</span><br><span class="line">            component:About</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/user/:userID'</span>,</span><br><span class="line">            component:User</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">'/profile'</span>,</span><br><span class="line">            component:Profile</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在这里，当路径出现 “/profile” 时就跳转到 profile.vue 组件的页面。</p>
<p><strong>② 通过router-link 实现跳转</strong><br> 在模板中通过 router-link 实现路径和页面的跳转。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home"</span> <span class="attr">tag</span>=<span class="string">"button"</span> <span class="attr">replace</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span> <span class="attr">tag</span>=<span class="string">"button"</span> <span class="attr">replace</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'/user/'+userID"</span><span class="attr">tag</span>=<span class="string">"button"</span> <span class="attr">replace</span>&gt;</span>用户<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/profile'</span>&gt;</span>档案<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;userid&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$route.params.userID&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当用户点击了 “档案” ，就会跳转到 “/profile”路径下的 profile.vue组件。<br> <strong>③ 传递参数</strong><br>  query 和params不同的是，query传递的是一个对象，所以在 router-link 标签的 to 属性不是单单的传递一个变量，而是一个对象。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;path:'/profile' , query:&#123;name:'zhangsan',age:18&#125;&#125;"</span>&gt;</span>档案<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用query传递参数是需要注意两点：<br>  第一：<strong>传递的是对象</strong>。因为传递的是对象，所以在 to 前面要使用 v-bind（简写是 ：）来获取，否则如果是 to=“{…}” 传递的是一个{}字符串儿不是一个对象。<br>  第二：<strong>query 也是对象</strong>，所以在query的内部可以传递很多的属性。<br> 上面的例子中，当用户点击的“档案” ，跳转到“档案”页面时，该页面的URL就会显示 query 对象传递过去的参数。比如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 profile.vue 添加</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;我是profile&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span&gt;&#123;&#123;$route.query&#125;&#125;&lt;/</span>span&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure>



<h4 id="通过代码来传递参数"><a href="#通过代码来传递参数" class="headerlink" title="通过代码来传递参数"></a>通过代码来传递参数</h4><h4 id="1-params-的代码书写方式"><a href="#1-params-的代码书写方式" class="headerlink" title="1.params 的代码书写方式"></a>1.params 的代码书写方式</h4><p>  首先就是把 router-link 变成 <strong>button 标签</strong>，紧接着为 button <strong>添加点击事件</strong>，最后再绑定的事件通过 <strong>$route.push 获取path</strong>。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1.将router-link 转换成button 标签并添加点击事件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"HomeClick"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"AboutClick"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"UserClick"</span>&gt;</span>用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"ProfileClick"</span>&gt;</span>档案<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;userid&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$route.params.userID&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'App'</span>,</span></span><br><span class="line">  data ()&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">          userID:<span class="string">"李四"</span></span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">      userid()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> <span class="keyword">this</span>.$route.params.userID</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="actionscript"><span class="comment">//绑定点击事件</span></span></span><br><span class="line">  methods:&#123;</span><br><span class="line">      HomeClick()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$router.push(<span class="string">'/home'</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      AboutClick()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$router.push(<span class="string">'/about'</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      UserClick()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$router.push(<span class="string">'/user/'</span> + <span class="keyword">this</span>.userID);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      ProfileClick()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$router.push(&#123;</span></span><br><span class="line"><span class="actionscript">              path:<span class="string">'/profile'</span>,</span></span><br><span class="line">              query:&#123;</span><br><span class="line"><span class="actionscript">                  name:<span class="string">'zhangsan'</span>,</span></span><br><span class="line">                  age:18</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里要主要的是两点：<br>  <strong>① 地址拼接：</strong> 常量需要用引号包括，变量不需要引号包裹，常量和变浪之间通过 + 进行拼接。比如： this.$router.push(‘/user/‘ + this.userID); /user 代表路径，是一个常量，需要用引号包裹，而 userID 是变量，通过this来获取当前的变量；<br>  <strong>② 参数传递</strong>：如果连接中涉及到参数传递的，路径后面要加“/”。比如(‘/user/‘ + this.userID);  我们需要将userID传递到URL中，所以路径 /user 后面要加 /</p>
<h4 id="2-query-代码的书写方式"><a href="#2-query-代码的书写方式" class="headerlink" title="2.query 代码的书写方式"></a>2.query 代码的书写方式</h4><p>  依旧是通过 <strong>$router.push</strong> 来获取，只是 push 内部不再是简简单单的变量，而是一个<strong>对象</strong>。对象内部有 path 和 query，而query又是一个对象，里面包含了 name 和age 两个属性。如下图所示：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">ProfileClick()&#123;</span><br><span class="line">         <span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">             path:<span class="string">'/profile'</span>,</span><br><span class="line">             query:&#123;</span><br><span class="line">                 name:<span class="string">'zhangsan'</span>,</span><br><span class="line">                 age:<span class="number">18</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Router</tag>
      </tags>
  </entry>
  <entry>
    <title>hash和history模式的区别</title>
    <url>/2020/03/12/hash%E5%92%8Chistory%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="hash和history两种模式的区别"><a href="#hash和history两种模式的区别" class="headerlink" title="hash和history两种模式的区别"></a>hash和history两种模式的区别</h2><blockquote>
<p>众所周知，vue-router有两种模式，hash模式和history模式，这里来谈谈两者的区别。</p>
<a id="more"></a>
</blockquote>
<h2 id="hash模式"><a href="#hash模式" class="headerlink" title="hash模式"></a>hash模式</h2><p>hash模式背后的原理是<code>onhashchange</code>事件,可以在window对象上监听这个事件:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(event.oldURL, event.newURL);</span><br><span class="line">     <span class="keyword">let</span> hash = location.hash.slice(<span class="number">1</span>); </span><br><span class="line">     <span class="built_in">document</span>.body.style.color = hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码可以通过改变hash来改变页面字体颜色，虽然没什么用，但是一定程度上说明了原理。 更关键的一点是，因为hash发生变化的url都会被浏览器记录下来，从而你会发现浏览器的前进后退都可以用了，同时点击后退时，页面字体颜色也会发生变化。这样一来，尽管浏览器没有请求服务器，但是页面状态和url一一关联起来，后来人们给它起了一个霸气的名字叫前端路由，成为了单页应用标配。</p>
<h2 id="history路由-放在服务器环境下测试"><a href="#history路由-放在服务器环境下测试" class="headerlink" title="history路由(放在服务器环境下测试)"></a>history路由(放在服务器环境下测试)</h2><p>随着history api的到来，前端路由开始进化了,前面的hashchange，你只能改变#后面的url片段，而history api则给了前端完全的自由</p>
<p>history api可以分为两大部分，切换和修改，参考MDN，切换历史状态包括<code>back</code>、<code>forward</code>、<code>go</code> 三个方法，对应浏览器的前进，后退，跳转操作，有同学说了，(谷歌)浏览器只有前进和后退，没有跳转，嗯，在前进后退上长按鼠标，会出来所有当前窗口的历史记录，从而可以跳转(也许叫跳更合适)：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">history.<span class="keyword">go</span>(<span class="number">-2</span>);<span class="comment">//后退两次</span></span><br><span class="line">history.<span class="keyword">go</span>(<span class="number">2</span>);<span class="comment">//前进两次</span></span><br><span class="line">history.back(); <span class="comment">//后退</span></span><br><span class="line">hsitory.forward(); <span class="comment">//前进</span></span><br></pre></td></tr></table></figure>

<h3 id="修改历史状态包括了pushState-replaceState"><a href="#修改历史状态包括了pushState-replaceState" class="headerlink" title="修改历史状态包括了pushState,replaceState"></a>修改历史状态包括了<code>pushState</code>,<code>replaceState</code></h3><p>两个方法,这两个方法接收三个参数:<code>stateObj</code>,<code>title</code>,<code>url</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">history.pushState(&#123;<span class="attr">color</span>:<span class="string">'red'</span>&#125;, <span class="string">'red'</span>, <span class="string">'red'</span>)</span><br><span class="line">history.back();</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     history.forward();</span><br><span class="line"> &#125;,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">window</span>.onpopstate = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(event.state)</span><br><span class="line">     <span class="keyword">if</span>(event.state &amp;&amp; event.state.color === <span class="string">'red'</span>)&#123;</span><br><span class="line">           <span class="built_in">document</span>.body.style.color = <span class="string">'red'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>pushstate</code>把页面的状态保存在state对象中，当页面的url再变回这个url时，可以通过<code>event.state</code>取到这个<code>state</code>对象，从而可以对页面状态进行还原，这里的页面状态就是页面字体颜色，其实滚动条的位置，阅读进度，组件的开关的这些页面状态都可以存储到state的里面。</p>
<h3 id="history模式的问题"><a href="#history模式的问题" class="headerlink" title="history模式的问题"></a>history模式的问题</h3><p>通过history api，我们丢掉了丑陋的#，但是它也有个问题：不怕前进，不怕后退，就怕<strong>刷新</strong>，<strong>f5</strong>，（如果后端没有准备的话）,因为刷新是实实在在地去请求服务器的,不玩虚的。 在hash模式下，前端路由修改的是#中的信息，而浏览器请求时是不带它玩的，所以没有问题.但是在history下，你可以自由的修改path，当刷新时，如果服务器中没有相应的响应或者资源，会分分钟刷出一个404来。</p>
<h4 id="如何实现修改URL而不刷新页面"><a href="#如何实现修改URL而不刷新页面" class="headerlink" title="如何实现修改URL而不刷新页面"></a>如何实现修改URL而不刷新页面</h4><p><strong>① 修改URL的hash</strong><br> 在控制台中输入命令： location.hash=”xxx”<br>  如果页面的URL发生改变，就会向服务器发送请求，请求的资源我们可以在Network查看。所以演示的步骤如下：在控制台输入  location.hash=”aaa” –&gt;观察浏览器的地址栏是否改变 –&gt; 查看Network 是否有新资源。<br>  <img src="https://img-blog.csdnimg.cn/2020051516195330.png" alt="在这里插入图片描述"> </p>
<p>在控制台输入  location.hash=”aaa”</p>
<p> <img src="https://img-blog.csdnimg.cn/2020051516195333.png" alt="在这里插入图片描述"> </p>
<p><strong>② html5 的pushState</strong></p>
<p>这是第二种修改URL而不刷新页面的方法，用法如下： history.pushState({…},’xxx’,’URL’)  。第一个参数是对象，第二个参数是title，第三个参数是URL</p>
<p> <img src="https://img-blog.csdnimg.cn/20200515162111161.png" alt="在这里插入图片描述"> </p>
<p> <img src="https://img-blog.csdnimg.cn/2020051516195332.png" alt="在这里插入图片描述"> </p>
<p>  history.pushState指令的原理和栈结构相似。先进后出，当在控制台输入多个history.pushState指令时，URL只会显示最后一条指令的URL。</p>
<p><strong>③ html5 的replaceState</strong><br> 同样的，和pushState工作的基本原理相似，但是也有不同：<br>  pushState是一个类似栈的结构，会<strong>保存历史记录</strong>，所以可以返回上一次访问过的页面；<br>  而replaceState 是直接用当前的URL替代了上一个URL，所以<strong>不能够返回上一次访问过的页面</strong>。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Router</tag>
      </tags>
  </entry>
</search>
