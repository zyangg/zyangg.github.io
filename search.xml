<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue-事件绑定</title>
    <url>/2020/03/07/Vue-%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h1 id="一、绑定事件"><a href="#一、绑定事件" class="headerlink" title="一、绑定事件"></a>一、绑定事件</h1><p>  在Vue中，通过 <strong>v-on 指令</strong>来绑定事件，绑定事件后具体的操作可以分成以下几种：</p>
<h4 id="1-在事件后接收简单的运算"><a href="#1-在事件后接收简单的运算" class="headerlink" title="1.在事件后接收简单的运算"></a>1.在事件后接收简单的运算</h4><a id="more"></a>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span> &gt;</span><br><span class="line">    &lt;form action=<span class="string">""</span> v-on:click.prevent&gt;</span><br><span class="line">        &lt;button v-on:click=<span class="string">"count +=1"</span>&gt;数值:&#123;&#123;count&#125;&#125;&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>form&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">        el:"</span>.warp<span class="string">",</span></span><br><span class="line"><span class="string">        data:&#123;</span></span><br><span class="line"><span class="string">                count:0</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>  在这个例子中，每点击一次按钮时，数值就会加1。但是如果我们把所有JavaScript代码都放置在模板中，代码量会很多，不易维护，所以才有了第二种写法</p>
<h4 id="2-在事件后接收无参数的方法"><a href="#2-在事件后接收无参数的方法" class="headerlink" title="2. 在事件后接收无参数的方法"></a>2. 在事件后接收无参数的方法</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span> &gt;</span><br><span class="line">    &lt;form action=<span class="string">""</span> v-on:click.prevent&gt;</span><br><span class="line">        &lt;button v-on:click=<span class="string">"message()"</span>&gt; 按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>form&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">        el:"</span>.warp<span class="string">",</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string">                message:function()&#123;</span></span><br><span class="line"><span class="string">                        alert("</span>Hello,Vue<span class="string">");</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>




<p>  在这个例子中，v-on事件后面接收的是一个名字为，方法的具体逻辑业务在Vue实例中的methods内部实现。当点击一次按钮，就会跳出内容为“Hello，Vue”的弹出弹出框。  这种写法相比较第一种写法会更容易，更容易，但是，所以有了第三种写法</p>
<h4 id="3-在事件后接收普通参数的方法"><a href="#3-在事件后接收普通参数的方法" class="headerlink" title="3.在事件后接收普通参数的方法"></a>3.在事件后接收普通参数的方法</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span> &gt;</span><br><span class="line">    &lt;form action=<span class="string">""</span> v-on:click.prevent&gt;</span><br><span class="line">        &lt;button v-on:click=<span class="string">"message('Vue')"</span>&gt; 按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>form&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">        el:"</span>.warp<span class="string">",</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string">                message:function( str)&#123;</span></span><br><span class="line"><span class="string">                        alert(str);</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>



<p>  在这个例子中，<strong>为message方法传递一个Vue的实参</strong>，在Vue实例中，用str形参来接收用户输入的实参。当点击一次按钮时，用户输入的Vue字符串就会传递给Vue实例中的str形参，然后弹出str的内容.<br>  <strong>此外，在method内部的方法还可以操作data内部的属性</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span> &gt;</span><br><span class="line">    &lt;form action=<span class="string">""</span> v-on:click.prevent&gt;</span><br><span class="line">        &lt;button v-on:click=<span class="string">"message('Vue')"</span>&gt; 按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>form&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">        el:"</span>.warp<span class="string">",</span></span><br><span class="line"><span class="string">        data:&#123;</span></span><br><span class="line"><span class="string">                count:0</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string">                message:function( str)&#123;</span></span><br><span class="line"><span class="string">                        alert(str);</span></span><br><span class="line"><span class="string">                        alert(this.count);</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>




<p>  在这个例子中，先弹出了用户输入的参数“Vue”，然后弹出了在data内部的属性count的值，说明在methods内部的方法是可以操作data内部的属性的，</p>
<h4 id="4-在事件中接受原生事件作为参数的方法"><a href="#4-在事件中接受原生事件作为参数的方法" class="headerlink" title="4.在事件中接受原生事件作为参数的方法"></a>4.在事件中接受原生事件作为参数的方法</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span> &gt;</span><br><span class="line">    &lt;form action=<span class="string">""</span> &gt;</span><br><span class="line">        &lt;button v-on:click=<span class="string">"warn('Form cannot be submitted yet.', $event)"</span>&gt;</span><br><span class="line">              Submit</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>form&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">        el:"</span>.warp<span class="string">",</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string">                warn: function (message, event) &#123;</span></span><br><span class="line"><span class="string">                        // 现在我们可以访问原生事件对象</span></span><br><span class="line"><span class="string">                        if (event) &#123;</span></span><br><span class="line"><span class="string">                          event.preventDefault()</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                        alert(message)</span></span><br><span class="line"><span class="string">                      &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>  在这个例子中，通过$event获取的原生的事件<br>  在事件的处理程序中，通过调用event.preventDefault()来出路默认提交事件 或 event.stopPropagation()组织冒泡事件是非常常见的需求。尽管可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。而下面事件的修饰符就很好的处理了这点</p>
<h1 id="二、事件的修饰符"><a href="#二、事件的修饰符" class="headerlink" title="二、事件的修饰符"></a>二、事件的修饰符</h1><p>  在前面中我们讲过，修饰符是由点开头的指令后缀来表示的。下面是几种常见的事件修饰符</p>
<h4 id="1-stop：阻止冒泡事件"><a href="#1-stop：阻止冒泡事件" class="headerlink" title="1.  .stop：阻止冒泡事件"></a>1.  .stop：阻止冒泡事件</h4><p>所谓的冒泡事件就是触发了子级事件的同时，也触发了父级的事件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"bto"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"bto1"</span>&gt;</span>冒泡事件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="actionscript">                bto1:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"div1"</span>);</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                bto:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"div2"</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;) </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>





<p>  当用户点击第二个div时，在控制台上输出div2，同时也输出了第一个div点击事件的内容div1。这就是冒泡事件，触发子级事件的同时也触发的父级的事件，要想组织冒泡事件，使用“.stop”即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"bto"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.stop</span>=<span class="string">"bto1"</span>&gt;</span>冒泡事件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="actionscript">                bto1:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"div1"</span>);</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                bto:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"div2"</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;) </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>





<p>仅仅输出了触发第二个div所相应的内容</p>
<h4 id="2-prevent-阻止默认提交事件"><a href="#2-prevent-阻止默认提交事件" class="headerlink" title="2. .prevent:阻止默认提交事件-"></a>2. .prevent:阻止默认提交事件-</h4><p>  默认事件一般发生在form表单和a标签两者，form表单会自动提交，a标签会自动跳转，通俗的理解就是点击一次就会刷新一次页面。想要阻止默认事件，使用“.prevent”即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">"stopclick"</span>&gt;</span>阻止默认事件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-once-只执行一次"><a href="#3-once-只执行一次" class="headerlink" title="3. .once:只执行一次"></a>3. .once:只执行一次</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span> &gt;</span><br><span class="line">    &lt;form action=<span class="string">""</span> v-on:click.prevent&gt;</span><br><span class="line">        &lt;button v-on:click.once=<span class="string">"count +=1"</span>&gt;数值:&#123;&#123;count&#125;&#125;&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>form&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">        el:"</span>.warp<span class="string">",</span></span><br><span class="line"><span class="string">        data:&#123;</span></span><br><span class="line"><span class="string">                count:0</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="4-capture-：先执行父级在执行子级"><a href="#4-capture-：先执行父级在执行子级" class="headerlink" title="4. .capture ：先执行父级在执行子级"></a>4. .capture ：先执行父级在执行子级</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">'alert("1")'</span> <span class="attr">style</span>=<span class="string">"width: 100%;height: 45px;background-color: black;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click</span>=<span class="string">"alert('2')"</span> <span class="attr">style</span>=<span class="string">'width: 80%;margin-left: 10%;background-color: white;'</span>&gt;</span></span><br><span class="line">            123</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>




<p>  在这个例子中，当点击白色区域时，会，说明在执行顺序上，使用了 .capture事件修饰符的元素会先执行父级元素，再执行子级元素</p>
<h4 id="5-self-只执行子级本身的函数"><a href="#5-self-只执行子级本身的函数" class="headerlink" title="5. .self:只执行子级本身的函数"></a>5. .self:只执行子级本身的函数</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">'alert("1")'</span> <span class="attr">style</span>=<span class="string">"width: 100%;height: 45px;background-color: black;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click</span>=<span class="string">"alert('2')"</span> <span class="attr">style</span>=<span class="string">'width: 80%;margin-left: 10%;background-color: white;'</span>&gt;</span></span><br><span class="line">        123</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>






<p>  在本例子中，当点击了黑色区域，，说明在使用了 .self事件修饰符的元素中，只会执行子级本身的函数而不会执行父级的函数  以上就是几个常用的事件修饰符：** .stop .prevent .once .capture .slef**</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6</title>
    <url>/2020/02/25/ES6/</url>
    <content><![CDATA[<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><h6 id="let声明的变量只在所处于的块级有效"><a href="#let声明的变量只在所处于的块级有效" class="headerlink" title="let声明的变量只在所处于的块级有效"></a>let声明的变量只在所处于的块级有效</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">     <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>注意：**使用let关键字声明的变量才具有块级作用域，使用var声明的变量不具备块级作用域特性。</p>
<h6 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// a is not defined </span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<h6 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h6><p>利用let声明的变量会绑定在这个块级作用域，不会受外界的影响</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">    tmp = <span class="string">'abc'</span>;</span><br><span class="line">    <span class="keyword">let</span> tmp; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>]();</span><br><span class="line">arr[<span class="number">1</span>]();</span><br></pre></td></tr></table></figure>

<p> <img src="https://img-blog.csdnimg.cn/20200514175333537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTkzOTk4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p>
<p><strong>经典面试题图解：</strong>此题的关键点在于变量i是全局的，函数执行时输出的都是全局作用域下的i值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>]();</span><br><span class="line">arr[<span class="number">1</span>]();</span><br></pre></td></tr></table></figure>

<p> <img src="https://img-blog.csdnimg.cn/20200514175333571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTkzOTk4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p>
<p><strong>经典面试题图解：</strong>此题的关键点在于每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的是自己上一级（循环产生的块级作用域）作用域下的i值.</p>
<h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><h6 id="具有块级作用域"><a href="#具有块级作用域" class="headerlink" title="具有块级作用域"></a>具有块级作用域</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">     <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure>

<h6 id="声明常量时必须赋值"><a href="#声明常量时必须赋值" class="headerlink" title="声明常量时必须赋值"></a>声明常量时必须赋值</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI; <span class="comment">// Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>

<h6 id="常量赋值后，值不能修改"><a href="#常量赋值后，值不能修改" class="headerlink" title="常量赋值后，值不能修改"></a>常量赋值后，值不能修改</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">PI = <span class="number">100</span>; <span class="comment">// Assignment to constant variable.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ary = [<span class="number">100</span>, <span class="number">200</span>];</span><br><span class="line">ary[<span class="number">0</span>] = <span class="string">'a'</span>;</span><br><span class="line">ary[<span class="number">1</span>] = <span class="string">'b'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(ary); <span class="comment">// ['a', 'b']; </span></span><br><span class="line">ary = [<span class="string">'a'</span>, <span class="string">'b'</span>]; <span class="comment">// Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>

<h5 id="const-指向的对象不可以修改-可以改变对象的内部属性"><a href="#const-指向的对象不可以修改-可以改变对象的内部属性" class="headerlink" title="const 指向的对象不可以修改 可以改变对象的内部属性"></a>const 指向的对象不可以修改 可以改变对象的内部属性</h5><h6 id="let、const、var-的区别"><a href="#let、const、var-的区别" class="headerlink" title="let、const、var 的区别"></a>let、const、var 的区别</h6><p> <img src="https://img-blog.csdnimg.cn/20200427134651719.png" alt="img"> </p>
<h3 id="对象字面量的增强写法"><a href="#对象字面量的增强写法" class="headerlink" title="对象字面量的增强写法"></a>对象字面量的增强写法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj =&#123;</span><br><span class="line">    name: name, <span class="comment">// name</span></span><br><span class="line">    age: age, <span class="comment">// age</span></span><br><span class="line">    height: height <span class="comment">//height</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数的增强写法"><a href="#函数的增强写法" class="headerlink" title="函数的增强写法"></a>函数的增强写法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">full : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">full() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>ES6中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构</p>
<h6 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> let [a, b, c] = [1, 2, 3];</span><br><span class="line"> console.log(a)//1</span><br><span class="line"> console.log(b)//2</span><br><span class="line"> console.log(c)//3</span><br><span class="line">//如果解构不成功，变量的值为undefined</span><br></pre></td></tr></table></figure>

<h6 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">let person = &#123; name: 'zhangsan', age: 20 &#125;; </span><br><span class="line">let &#123; name, age &#125; = person;</span><br><span class="line">console.log(name); // 'zhangsan' </span><br><span class="line">console.log(age); // 20</span><br><span class="line"></span><br><span class="line">let &#123;name: myName, age: myAge&#125; = person; // myName myAge 属于别名</span><br><span class="line">console.log(myName); // 'zhangsan' </span><br><span class="line">console.log(myAge); // 20</span><br></pre></td></tr></table></figure>

<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">() =&gt; &#123;&#125; //()：代表是函数； =&gt;：必须要的符号，指向哪一个代码块；&#123;&#125;：函数体</span><br><span class="line">const fn = () =&gt; &#123;&#125;//代表把一个函数赋值给fn</span><br><span class="line"></span><br><span class="line"> function sum(num1, num2) &#123; </span><br><span class="line">     return num1 + num2; </span><br><span class="line"> &#125;</span><br><span class="line"> //es6写法</span><br><span class="line"> const sum = (num1, num2) =&gt; num1 + num2;</span><br></pre></td></tr></table></figure>

<h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function sum (first, ...args) &#123;</span><br><span class="line">     console.log(first); // 10</span><br><span class="line">     console.log(args); // [20, 30] </span><br><span class="line"> &#125;</span><br><span class="line"> sum(10, 20, 30)</span><br></pre></td></tr></table></figure>

<h6 id="剩余参数和解构配合使用"><a href="#剩余参数和解构配合使用" class="headerlink" title="剩余参数和解构配合使用"></a>剩余参数和解构配合使用</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">let students = ['wangwu', 'zhangsan', 'lisi'];</span><br><span class="line">let [s1, ...s2] = students; </span><br><span class="line">console.log(s1);  // 'wangwu' </span><br><span class="line">console.log(s2);  // ['zhangsan', 'lisi']</span><br></pre></td></tr></table></figure>

<h3 id="ES6-的内置对象扩展"><a href="#ES6-的内置对象扩展" class="headerlink" title="ES6 的内置对象扩展"></a>ES6 的内置对象扩展</h3><h4 id="Array-的扩展方法"><a href="#Array-的扩展方法" class="headerlink" title="Array 的扩展方法"></a>Array 的扩展方法</h4><p>扩展运算符可以将数组或者对象转为用逗号分隔的参数序列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">...ary  <span class="comment">// 1, 2, 3</span></span><br><span class="line"><span class="built_in">console</span>.log(...ary);    <span class="comment">// 1 2 3,相当于下面的代码</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>扩展运算符可以应用于合并数组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 方法一 </span><br><span class="line"> let ary1 = [1, 2, 3];</span><br><span class="line"> let ary2 = [3, 4, 5];</span><br><span class="line"> let ary3 = [...ary1, ...ary2];</span><br><span class="line"> // 方法二 </span><br><span class="line"> ary1.push(...ary2);</span><br></pre></td></tr></table></figure>

<p>map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123; </span><br><span class="line">    <span class="string">"0"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"1"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"length"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newAry = <span class="built_in">Array</span>.from(arrayLike, item =&gt; item *<span class="number">2</span>)<span class="comment">//[2,4]</span></span><br></pre></td></tr></table></figure>

<p>注意：如果是对象，那么属性需要写对应的索引</p>
<h4 id="实例方法：find"><a href="#实例方法：find" class="headerlink" title="实例方法：find()"></a>实例方法：find()</h4><p>用于找出第一个符合条件的数组成员，如果没有找到返回undefined</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [&#123;</span><br><span class="line">     id: <span class="number">1</span>,</span><br><span class="line">     name: <span class="string">'张三'</span></span><br><span class="line"> &#125;, &#123; </span><br><span class="line">     id: <span class="number">2</span>,</span><br><span class="line">     name: <span class="string">'李四'</span></span><br><span class="line"> &#125;]; </span><br><span class="line"> <span class="keyword">let</span> target = ary.find(<span class="function">(<span class="params">item, index</span>) =&gt;</span> item.id == <span class="number">2</span>);<span class="comment">//找数组里面符合条件的值，当数组中元素id等于2的查找出来，注意，只会匹配第一个</span></span><br></pre></td></tr></table></figure>

<h4 id="实例方法：findIndex"><a href="#实例方法：findIndex" class="headerlink" title="实例方法：findIndex()"></a>实例方法：findIndex()</h4><p>用于找出第一个符合条件的数组成员的位置，如果没有找到返回-1</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line"><span class="keyword">let</span> index = ary.findIndex(<span class="function">(<span class="params">value, index</span>) =&gt;</span> value &gt; <span class="number">9</span>); </span><br><span class="line"><span class="built_in">console</span>.log(index); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h4 id="实例方法：includes"><a href="#实例方法：includes" class="headerlink" title="实例方法：includes()"></a>实例方法：includes()</h4><p>判断某个数组是否包含给定的值，返回布尔值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>) <span class="comment">// true </span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="String-的扩展方法"><a href="#String-的扩展方法" class="headerlink" title="String 的扩展方法"></a>String 的扩展方法</h3><h4 id="模板字符串（★★★）"><a href="#模板字符串（★★★）" class="headerlink" title="模板字符串（★★★）"></a>模板字符串（★★★）</h4><p>ES6新增的创建字符串的方式，使用反引号定义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">`zhangsan`</span>;</span><br></pre></td></tr></table></figure>

<h5 id="模板字符串中可以解析变量"><a href="#模板字符串中可以解析变量" class="headerlink" title="模板字符串中可以解析变量"></a>模板字符串中可以解析变量</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'张三'</span>; </span><br><span class="line"><span class="keyword">let</span> sayHello = <span class="string">`hello,my name is <span class="subst">$&#123;name&#125;</span>`</span>; <span class="comment">// hello, my name is zhangsan</span></span><br></pre></td></tr></table></figure>

<h5 id="模板字符串中可以换行"><a href="#模板字符串中可以换行" class="headerlink" title="模板字符串中可以换行"></a>模板字符串中可以换行</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = &#123; </span><br><span class="line">    name: <span class="string">'zhangsan'</span>, </span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    sex: <span class="string">'男'</span> </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> html = <span class="string">` &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.name&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.age&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.sex&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt; `</span>;</span><br></pre></td></tr></table></figure>

<h5 id="在模板字符串中可以调用函数"><a href="#在模板字符串中可以调用函数" class="headerlink" title="在模板字符串中可以调用函数"></a>在模板字符串中可以调用函数</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">'哈哈哈哈 追不到我吧 我就是这么强大'</span>;</span><br><span class="line"> &#125;; </span><br><span class="line"> <span class="keyword">let</span> greet = <span class="string">`<span class="subst">$&#123;sayHello()&#125;</span> 哈哈哈哈`</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(greet); <span class="comment">// 哈哈哈哈 追不到我吧 我就是这么强大 哈哈哈哈</span></span><br></pre></td></tr></table></figure>

<h4 id="实例方法：startsWith-和-endsWith"><a href="#实例方法：startsWith-和-endsWith" class="headerlink" title="实例方法：startsWith() 和 endsWith()"></a>实例方法：startsWith() 和 endsWith()</h4><ul>
<li>startsWith()：表示参数字符串是否在原字符串的头部，返回布尔值</li>
<li>endsWith()：表示参数字符串是否在原字符串的尾部，返回布尔值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'Hello world!'</span>;</span><br><span class="line">str.startsWith(<span class="string">'Hello'</span>) <span class="comment">// true </span></span><br><span class="line">str.endsWith(<span class="string">'!'</span>)       <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="实例方法：repeat"><a href="#实例方法：repeat" class="headerlink" title="实例方法：repeat()"></a>实例方法：repeat()</h4><p>repeat方法表示将原字符串重复n次，返回一个新字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'x'</span>.repeat(<span class="number">3</span>)      <span class="comment">// "xxx" </span></span><br><span class="line"><span class="string">'hello'</span>.repeat(<span class="number">2</span>)  <span class="comment">// "hellohello"</span></span><br></pre></td></tr></table></figure>

<h3 id="Set-数据结构（★★）"><a href="#Set-数据结构（★★）" class="headerlink" title="Set 数据结构（★★）"></a>Set 数据结构（★★）</h3><p>ES6 提供了新的数据结构  Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p>
<p>Set本身是一个构造函数，用来生成  Set  数据结构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br></pre></td></tr></table></figure>

<p>Set函数可以接受一个数组作为参数，用来初始化。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set([1, 2, 3, 4, 4]);//&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><ul>
<li>add(value)：添加某个值，返回 Set 结构本身</li>
<li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</li>
<li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员</li>
<li>clear()：清除所有成员，没有返回值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.add(<span class="number">1</span>).add(<span class="number">2</span>).add(<span class="number">3</span>); <span class="comment">// 向 set 结构中添加值 </span></span><br><span class="line">s.delete(<span class="number">2</span>)             <span class="comment">// 删除 set 结构中的2值   </span></span><br><span class="line">s.has(<span class="number">1</span>)                <span class="comment">// 表示 set 结构中是否有1这个值 返回布尔值 </span></span><br><span class="line">s.clear()               <span class="comment">// 清除 set 结构中的所有值</span></span><br><span class="line"><span class="comment">//注意：删除的是元素的值，不是代表的索引</span></span><br></pre></td></tr></table></figure>

<h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>Set 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">s.forEach(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>ES5数组高阶函数</title>
    <url>/2020/02/22/ES5%E6%95%B0%E7%BB%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="ES5数组高阶函数"><a href="#ES5数组高阶函数" class="headerlink" title="ES5数组高阶函数"></a>ES5数组高阶函数</h2><h4 id="forEach-遍历"><a href="#forEach-遍历" class="headerlink" title="forEach(遍历)"></a>forEach(遍历)</h4><p>forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数。(没有返回值，将数组遍历)</p>
<p>注意: forEach() 对于空数组是不会执行回调函数的。</p>
<p>回调函数参数：currentValue  必需。当前元素； index  可选。当前元素的索引值； arr  可选。当前元素所属的数组对象。</p>
<a id="more"></a>

<h4 id="filter-过滤，返回新数组"><a href="#filter-过滤，返回新数组" class="headerlink" title="filter(过滤，返回新数组)"></a>filter(过滤，返回新数组)</h4><p>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p>
<p>注意： filter() 不会对空数组进行检测。</p>
<p>注意： filter() 不会改变原始数组。</p>
<p>回调函数参数：currentValue  必需。当前元素； index  可选。当前元素的索引值； arr  可选。当前元素所属的数组对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">32</span>, <span class="number">33</span>, <span class="number">16</span>, <span class="number">40</span>];</span><br><span class="line"><span class="built_in">console</span>.log(ages.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> item &gt; <span class="number">18</span>;	<span class="comment">//返回判断条件为真的数组元素</span></span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">//输出[32,33,40]</span></span><br></pre></td></tr></table></figure>

<h4 id="map-映射，返回新数组"><a href="#map-映射，返回新数组" class="headerlink" title="map(映射，返回新数组)"></a>map(映射，返回新数组)</h4><p>map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p>
<p>map() 方法按照原始数组元素顺序依次处理元素。</p>
<p>注意： map() 不会对空数组进行检测。</p>
<p>注意： map() 不会改变原始数组。</p>
<p>回调函数参数：currentValue  必需。当前元素； index  可选。当前元素的索引值； arr  可选。当前元素所属的数组对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">65</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> item * <span class="number">10</span>;</span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">//输出[650,440,120,40]</span></span><br></pre></td></tr></table></figure>

<h4 id="some-判断是否含有符合条件的元素，返回布尔值"><a href="#some-判断是否含有符合条件的元素，返回布尔值" class="headerlink" title="some(判断是否含有符合条件的元素，返回布尔值)"></a>some(判断是否含有符合条件的元素，返回布尔值)</h4><p>some() 方法用于检测数组中的元素是否满足指定条件（函数提供）。</p>
<p>some() 方法会依次执行数组的每个元素：</p>
<p>如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。<br>如果没有满足条件的元素，则返回false。<br>注意： some() 不会对空数组进行检测。</p>
<p>注意： some() 不会改变原始数组。</p>
<p>回调函数参数：currentValue  必需。当前元素； index  可选。当前元素的索引值； arr  可选。当前元素所属的数组对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ages = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">20</span>];</span><br><span class="line"><span class="built_in">console</span>.log(ages.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> item &gt; <span class="number">28</span>;</span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">//输出false</span></span><br></pre></td></tr></table></figure>

<h4 id="reduce-累加"><a href="#reduce-累加" class="headerlink" title="reduce(累加)"></a>reduce(累加)</h4><p>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p>
<p>reduce() 可以作为一个高阶函数，用于函数的 compose。</p>
<p>注意: reduce() 对于空数组是不会执行回调函数的。</p>
<p>回调函数参数：total  必需。初始值, 或者计算结束后的返回值； currentValue  必需。当前元素； index  可选。当前元素的索引值； arr  可选。当前元素所属的数组对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [&#123;<span class="attr">price</span>:<span class="number">30</span>,<span class="attr">count</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">price</span>:<span class="number">40</span>,<span class="attr">count</span>:<span class="number">3</span>&#125;,&#123;<span class="attr">price</span>:<span class="number">50</span>,<span class="attr">count</span>:<span class="number">5</span>&#125;];</span><br><span class="line"><span class="comment">//当数组元素为引用类型时需要注意</span></span><br><span class="line"><span class="keyword">var</span> sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x.price*x.count + y.price*y.count;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br><span class="line"><span class="comment">//输出NaN</span></span><br><span class="line"><span class="comment">//正确应该为</span></span><br><span class="line"><span class="keyword">var</span> sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y.price*y.count;</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br><span class="line"><span class="comment">//输出430</span></span><br></pre></td></tr></table></figure>

<h4 id="filter-map-reduce链式编程"><a href="#filter-map-reduce链式编程" class="headerlink" title="filter map reduce链式编程"></a>filter map reduce链式编程</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>]</span><br><span class="line"><span class="keyword">let</span> total = nums.filter(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n&lt;<span class="number">100</span></span><br><span class="line">&#125;).map(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n*<span class="number">2</span></span><br><span class="line">&#125;).reduce(<span class="function"><span class="keyword">function</span>(<span class="params">preValue,n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preValue+n</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-作用域插槽</title>
    <url>/2020/03/14/Vue-%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD/</url>
    <content><![CDATA[<h1 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h1><p>  说白了，<strong>作用域就是变量的使用范围</strong>，那么本例的问题是该如果给变量找范围。一言不合就上代码，这是小编的风格⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄</p>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cnp</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tem"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#warp"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                isShow:<span class="literal">false</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            components:&#123;</span><br><span class="line">                cnp:&#123;</span><br><span class="line"><span class="actionscript">                    template:<span class="string">"#tem"</span>,</span></span><br><span class="line">                    data()&#123;</span><br><span class="line"><span class="actionscript">                        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                            isShow:<span class="literal">true</span></span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  还是老样子，Vue作为父组件，声明cnp子组件是局部变量，并且在Vue和cnp中都有变量isShow，只是取值不一样，在Vue中是false，在cnp中是true。<br>  小编希望通过是否显示子组件cnp的内容来判断变量isShow的作用域。如果子组件cnp没有显示内容，说明使用的是Vue中的isShow，反之就是使用了子组件中的isShow。<br>  大是显示内容，小是不显示内容，各位客官，买定离手了喂，买定离手了喂。</p>
<p>  结果发现是不显示的，说明isShow用的是Vue中的数据。如果将Vue中的isShow修改为true，结果是显示的。这就涉及到了变量的作用域问题  官方给出的准则是这样的：比如上面的案例是在父组件的div模板中使用的，所以浏览器会到父组件中的data对变量isShow进行编译。  在懂了作用域的概念后，作用域的插槽就好办多了 o()o</p>
<h1 id="二、作用域插槽"><a href="#二、作用域插槽" class="headerlink" title="二、作用域插槽"></a>二、作用域插槽</h1><p>  作用域插槽呢，就是<strong>在父组件中替换插槽的标签，但是内容是由子组件提供的。</strong>这说的是啥？？？？？</p>
<p>image.png</p>
<p> 没关系，先让我们来看一下下面的例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tem"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in pLanguage"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#warp"</span>,</span></span><br><span class="line">            components:&#123;</span><br><span class="line">                cpn:&#123;</span><br><span class="line"><span class="actionscript">                    template:<span class="string">"#tem"</span>,</span></span><br><span class="line">                    data()&#123;</span><br><span class="line"><span class="actionscript">                        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                            pLanguage:[<span class="string">'JavaScript'</span>,<span class="string">'Java'</span>,<span class="string">'C++'</span>,<span class="string">'C#'</span>]</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https:////upload-images.jianshu.io/upload_images/21260932-77c233fd30060b19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/194/format/webp" alt="img"></p>
<p>image.png</p>
<p>  这个例子中，我们通过在子组件中使用v-for指令使pLanguage的数据以列表的形式展示出来。<br>  现在的需求是，我们希望在第二个子组件中，数据是“ JavaScript - Java - C++ - C# ” 这种形式展示的。这跟作用域插槽的作用是不是很像：在父组件中替换插槽的标签，但是内容是由子组件提供的。替换标签就相当于展示的形式不一样了嘛，内容依旧是子组件中的pLanguage提供。<br>  目标已经十分的明确，首先是要获取子组件中的pLanguage数据，然后在父组件中修改自己想要的样式，小编觉得直接在子组件使用插槽，然后在父组件中修改样式就可以实现，于是乎写下了这样的代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!-- 在父组件修改想要展示的形式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"item in pLanguage"</span>&gt;</span>&#123;&#123;item&#125;&#125; - <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 在子组件使用插槽 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tem"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in pLanguage"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>本以为离成功还差一步的时候，深刻体会到了一句话：现实是残酷的！</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/21260932-174d0487c13b81c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/523/format/webp" alt="img"></p>
<p>image.png</p>
<p>  意思是说，。但硬是要获取子组件的数据，怎么办呢？  这个时候就到了 作用域插槽 出场了使用作用域大概分成以下来两个步骤：<strong>第一步：为slot设置属性，将子组件中的数据复制给属性**</strong>第二部：使用slot-scope 获取slot对象，通过slot.属性名来获取子组中的数**</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在父组件通过slot-scope获取到slot对象,并且通过slot.data获取子组件中的pLanguage --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot-scope</span>=<span class="string">"slot"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"item in slot.data"</span>&gt;</span>&#123;&#123;item&#125;&#125; - <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 在子组件声明了名字为 data 的属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tem"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:data</span>=<span class="string">'pLanguage'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in pLanguage"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="https:////upload-images.jianshu.io/upload_images/21260932-8719f19bf5972e8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/371/format/webp" alt="img"></p>
<p>image.png</p>
<p>  首先，，这样子当cnp没有书写别的格式时就可以直接使用slot中的格式  其次，【当然，属性名是可以人任意的】，并且将pLanguage赋值给属性data，这就意味着data中的数据和pLanguage是一样的  然后，在父组件中，并且在slot对象中有个叫data的属性，这样就相当于父组件获取到了子组件pLanguage中的数据  最后，，并且显示出来  这就是使用作用域插槽的过程，这个时候你就会很好理解的这句话的含义</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/21260932-dfceb97e0908a360.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/720/format/webp" alt="img"></p>
<p>image.png</p>
<p>  我知道，这里众多的读者中肯定有跟小编一样的强迫症患者，想把那个尾巴去掉</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/21260932-1470a560a9925a81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/385/format/webp" alt="img"></p>
<p>image.png</p>
<p> 其实很简单，用就好</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;&#123;&#123;slot.data.<span class="keyword">join</span>(<span class="string">' - '</span>)&#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https:////upload-images.jianshu.io/upload_images/21260932-72fdef62adf44dcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/341/format/webp" alt="img"></p>
<p>image.png</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-全局组件和局部组件</title>
    <url>/2020/03/09/Vue-%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B6%E5%92%8C%E5%B1%80%E9%83%A8%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="一、全局组件"><a href="#一、全局组件" class="headerlink" title="一、全局组件"></a>一、全局组件</h1><p><strong>1.定义</strong>：可以在<strong>多个Vue实例中应用</strong><br> <strong>2.声明</strong>：通过Vue中的<strong>component方法</strong>声明，代码如下：</p>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"warp1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line">            template:`</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">            `</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'my-cpn'</span>,cpnC);</span></span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#warp'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#warp1'</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-1d303fe37c6945f8.png" alt="img"> </p>
<p>全局组件.png</p>
<p>  在这个例子中，声明了两个Vue实例 vm、vm1，然后分别在两个Vue实例的范围内使用组件，可以看到显示的信息的三条，说明通过Vue.component()这个方式声明的是全局组件<br>  但是在一般的开发过程中，很少会在一个页面中声明多个Vue实例，所以一般全局组件用的比较少，局部组件使用频率会比较高，那么是不是有读者很疑惑，究竟怎么样定义的组件才能算是局部组件呢？别着急，下面小编就为你答疑啦</p>
<h1 id="二、局部组件"><a href="#二、局部组件" class="headerlink" title="二、局部组件"></a>二、局部组件</h1><p><strong>1.定义</strong>：顾名思义，局部组件就是<strong>只能在注册的Vue实例中运用</strong><br> <strong>2.声明</strong>：在Vue实例内部使用<strong>conponents属性声明对象</strong>，对象内部的<strong>属性名为组件的标签名</strong>，<strong>属性值为组件构造器的名字</strong>，代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"warp1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line">            template:`</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">            `</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#warp'</span>,</span></span><br><span class="line">            components:&#123;</span><br><span class="line"><span class="actionscript">                cpn:<span class="string">'cpnC'</span>,</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#warp1'</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-eb3d7407d2a94fe5.png" alt="img"> </p>
<p>image.png</p>
<p>  在这个例子中，同样也是声明了两个Vue实例：vm 和vm1，然后在vm实例中通过components属性声明一个对象，其中，。观察HTML结构可以发现在两个Vue实例中都引用了局部组件，但是只显示了id名为warp的div下的组件。说明通过components声明的组件是局部组件，使用的范围仅仅是在注册的Vue实例中。  另外，注册局部组件需要注意：。</p>
<p>综上所述，全局组件和局部组件主要有以下的不同点<br> <strong>① 声明方式</strong>：<strong>全局组件</strong>是通过Vue中的<strong>component方法声明</strong>，而<strong>局部组件</strong>是通过Vue实例中的<strong>conponents属性</strong>声明<br> <strong>② 作用范围</strong>：<strong>全局组件</strong>可以在<strong>多个Vue实例</strong>中生效，而<strong>局部组件</strong>只能在<strong>注册的Vue实例</strong>范围内生效</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>创建vue脚手架</title>
    <url>/2020/03/18/Vue-%E5%88%9B%E5%BB%BAvue%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    <content><![CDATA[<p>Vue-cli</p>
<p> vue脚手架指的是vue-cli，它是一个专门为单页面应用快速搭建繁杂的脚手架，它可以轻松的创建新的应用程序而且可用于自动生成vue和webpack的项目模板。 </p>
<a id="more"></a>

<p>1、首先保证全局安装@vue/cli工具 ，没有自行下载</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cnpm i @vue/cli -g</span><br></pre></td></tr></table></figure>

<p>2、推荐下载yarn包管理器</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cnpm i yarn -g</span><br></pre></td></tr></table></figure>

<p>3、接下来我们就可以在自己的电脑里创建项目，找到电脑某个位置，在此文件夹按住shift同时右键，在此处打开cmd命令窗口或者在此处打开powershell窗口</p>
<p>4、打开窗口之后运行vue ui命令，此时就会打开ui图形界面</p>
<p> <img src="https://img-blog.csdnimg.cn/20190613220648286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTgxOTA5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p>
<p>5、我们选择创建之后就会进入创建页面</p>
<p> <img src="https://img-blog.csdnimg.cn/20190613220705271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTgxOTA5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p>
<p>6、点击在此处创建新项目，就会进入项目详情，详情里面，首先填写项目的名字，然后包管理器选择yarn，在填写初始会git默认注释</p>
<p> <img src="https://img-blog.csdnimg.cn/20190613220718747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTgxOTA5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p>
<p>7、上面填写完毕后，点击下一步，会进入到选择默认配置还是手动配置，以及选择之前的预设，我们选择手动配置</p>
<p> <img src="https://img-blog.csdnimg.cn/20190613220731996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTgxOTA5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p>
<p>8、选择完后继续点击下一步，选择功能，以下是所有功能介绍，我们可以先选择babel、router、Linter、使用配置文件，开发的时候一般css预处理、vuex也肯定要安装的</p>
<p>babel （js高级转低级）</p>
<p>TypeScript （js超级）</p>
<p>Progressive Web App (PWA) Support （渐进式web应用）</p>
<p>Router（路由）</p>
<p>Vuex（状态管理工具）</p>
<p>CSS Pre-processors（css预处理）</p>
<p>Linter / Formatter（语法规范检查）</p>
<p>Unit Testing、E2E Testing（测试方式）</p>
<p>使用配置文件（配置项是存在单独配置文件）</p>
<p> <img src="https://img-blog.csdnimg.cn/20190613220750625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTgxOTA5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p>
<p> <img src="https://img-blog.csdnimg.cn/20190613220803343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTgxOTA5OA==,size_16,color_FFFFFF,t_70" alt="img"> </p>
<p>9、上面选择完后，继续点击下一步会进入到配置选项，此处第一个是 是否开启路由的history模式，我们不开启采用hash模式,eslint采用 ESLint + Standard config ，Pick additional lint features选择默认开启</p>
<p> <img src="https://img-blog.csdnimg.cn/20190613220817594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTgxOTA5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p>
<p>10、选择完后，点击创建项目，会弹出是否存为预设，下一次直接使用，可以存个预设的名字，然后点击 保存预设并创建项目 即创建完毕</p>
<p> <img src="https://img-blog.csdnimg.cn/20190613220850644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTgxOTA5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p>
<p>11、创建完毕后会进入到项目操作界面</p>
<p>插件（项目用到的插件可以在这里安装）</p>
<p>依赖（项目的依赖工具）</p>
<p>配置（那就是配置了）</p>
<p>任务（可以运行项目、打包项目等）</p>
<p> <img src="https://img-blog.csdnimg.cn/20190613220906488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTgxOTA5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p>
<p>12、我们选择任务》server》运行，即可将项目运行起来</p>
<p> <img src="https://img-blog.csdnimg.cn/20190613220917331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTgxOTA5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p>
<p>13、最后点击启动app即可看见我们自己创建的项目</p>
<p> <img src="https://img-blog.csdnimg.cn/20190613220928205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTgxOTA5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-基本语法</title>
    <url>/2020/03/03/Vue-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>为了更好的理解Vue语法的组成，我们先来了解一下Vue的运作方式</p>
<h1 id="一、Vue的运作方式"><a href="#一、Vue的运作方式" class="headerlink" title="一、Vue的运作方式"></a>一、Vue的运作方式</h1><p>  Vue是以<strong>数据驱动</strong>和<strong>组件化</strong>为核心的JavaScript MVVM库，通过ViewModel实现数据和视图的<strong>双向绑定</strong>。下图展示了MVVM模式和Vue的运作方式</p>
 <a id="more"></a>

<p> <img src="https://img-blog.csdnimg.cn/20200514124445685.png" alt="在这里插入图片描述"> </p>
<p>1.基本概念<br> ① <strong>MVVM</strong>：Model-View-ViewModel 的简称；<br> ② <strong>Model</strong>：数据模型，也可以理解成在Model中定义的数据修改和操作的业务逻辑；<br> ③ <strong>View</strong>：UI组件，负责将数据模型转化成UI展现出来<br> ④ ViewModel：视图模型，是一个同步View 和 Model的对象。<br> 2.相互关系<br> ① Model、View、ViewModel：在MVVM架构下，<strong>View 和 Model 之间没有直接的联系，而是通过ViewModel进行交互</strong>，View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上，这就是上面所说的双向绑定。<br> ② Vue和ViewModel：每个 Vue 应用都需要通过实例化 Vue 来实现，而<strong>ViewModel是Vue.js的核心，是Vue的一个实例</strong>。Vue实例是作用于某一个HTML元素上的，这个元素可以是HTML的body元素，也可以是指定了id的某个元素。<br> 3.运作方式<br>  由图可以看到，ViewModel中包含了Dom Listerners和Dom Blindings。<strong>DOM Listeners会监测页面上DOM元素的变化</strong>，如果有变化，则更改Model中的数据；而<strong>Data Bindings会帮更新页面中的DOM元素</strong>这就是双向绑定的实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- View模型 --&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;h1&gt;site : &#123;&#123;site&#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    &lt;!-- Model --&gt;</span><br><span class="line">    <span class="keyword">var</span> message=&#123;</span><br><span class="line">        site:<span class="string">'Hello Vue！'</span></span><br><span class="line">    &#125;</span><br><span class="line">    &lt;!--创建Vue实例，将View和Model绑定在一起--&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data: message</span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>

<h1 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h1><p>  经过上面的讲解，我们可以通俗的理解成，每个 Vue 应用的实现就是不断完成MVVM模型的过程，因此定义Vue语法可以分成以下三步：<br><strong>1.定义View</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">      &lt;h1&gt;site : &#123;&#123;site&#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>

<p>  定义View其实就是定义HTML结构和插值表达式。插值表达式是用例输出在Model模型中的数据、属性或者是函数的返回值</p>
<h5 id="2-定义Model"><a href="#2-定义Model" class="headerlink" title="2.定义Model"></a>2.定义Model</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message=&#123;</span><br><span class="line">      site:<span class="string">'Hello Vue！'</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p> 定义Model就是<strong>定义一个对象</strong>，对象内的属性名就是在View在插值表达式内的变量名 </p>
<h5 id="3-创建Vue实例"><a href="#3-创建Vue实例" class="headerlink" title="3.创建Vue实例"></a>3.创建Vue实例</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data: message</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>可以看到，Vue实例中有两个组成部分：<strong>el和data</strong>。<strong>el</strong>是element元素的英文名称缩写，<strong>是连接View模型中的元素</strong>；<strong>data</strong>是数据，<strong>用来连接Model模型</strong>。所以才说ViewModel是连接Model和View的关键。<br> 综上所述，定义一个完整的Vue语法如下所示;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- View模型 --&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;h1&gt;site : &#123;&#123;site&#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    &lt;!-- Model --&gt;</span><br><span class="line">    <span class="keyword">var</span> message=&#123;</span><br><span class="line">        site:<span class="string">'Hello Vue！'</span></span><br><span class="line">    &#125;</span><br><span class="line">    &lt;!--创建Vue实例，将View和Model绑定在一起--&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data: message</span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-常用指令1</title>
    <url>/2020/03/04/Vue-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A41/</url>
    <content><![CDATA[<h1 id="一、指令、参数、修饰符"><a href="#一、指令、参数、修饰符" class="headerlink" title="一、指令、参数、修饰符"></a>一、指令、参数、修饰符</h1><h5 id="1-指令：指令是指带有v-作为前缀的特殊属性，例如：-v-html就是一个指令，表示控制标签的HTML结构。"><a href="#1-指令：指令是指带有v-作为前缀的特殊属性，例如：-v-html就是一个指令，表示控制标签的HTML结构。" class="headerlink" title="1.指令：指令是指带有v-作为前缀的特殊属性，例如： v-html就是一个指令，表示控制标签的HTML结构。"></a>1.指令：指令是指带有v-作为前缀的特殊属性，例如： v-html就是一个指令，表示控制标签的HTML结构。</h5><h5 id="2-参数：参数在指令后以冒号指明。"><a href="#2-参数：参数在指令后以冒号指明。" class="headerlink" title="2.参数：参数在指令后以冒号指明。"></a>2.参数：参数在指令后以冒号指明。</h5><a id="more"></a>

<p>① 参数可以是<strong>某个属性</strong>，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;a v-bind：href=“url”&gt;&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure>

<p> href 是参数，告知 v-bind 指令将a的 href 属性与表达式 url 的值绑定。<br>② 参数还可以是<strong>事件名</strong>，例如： </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button v-on:click=<span class="string">"bto&gt;&lt;/button&gt;</span></span><br></pre></td></tr></table></figure>

<p> 在这里，参数是监听的事件名<br>③ <strong>动态参数</strong><br>  Vue中的动态参数可以是使用方括号[]括起来的JavaScript 表达式或者某个属性或者是事件 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;a v-bind:[box1]&gt; 动态参数&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:".warp",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">            box1:"url",</span></span><br><span class="line"><span class="regexp">            url:"https:/</span><span class="regexp">/www.runoob.com/</span>vue2/vue-template-syntax.html<span class="string">", </span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;) </span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<p> 在本例中，box1是动态参数，在Vue实例中为box1赋值url,然后在为url赋值一个地址，用法类似于形式参数<br> <strong>④ 动态参数的约束</strong><br> 4.1 对动态参数的<strong>值</strong>的约束<br>  动态参数预期会<strong>求出一个字符串</strong>，异常情况下值为 null。这个特殊的 null 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。<br> 4.2 对动态参数<strong>表达式</strong>的约束<br>  <strong>空格和引号</strong>放在 HTML attribute 名里是无效的会报错。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;a v-bind:[<span class="string">'foo'</span> + bar]=<span class="string">"value"</span>&gt; ... &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/会触发一个编译警告</span></span><br></pre></td></tr></table></figure>

<p>因此，建议使用没有空格或引号的表达式，或用计算属性替代这种复杂表达式。</p>
<h5 id="3-修饰符"><a href="#3-修饰符" class="headerlink" title="3.修饰符"></a>3.修饰符</h5><p>  修饰符<strong>以半角句号 . 指明的特殊后缀</strong>，用于指出一个指令应该以特殊方式绑定。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;form v-on:submit.prevent=<span class="string">"onSubmit"</span>&gt;...&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure>

<p>.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()：</p>
<h1 id="二、插值：使用“Mustache”语法-双大括号"><a href="#二、插值：使用“Mustache”语法-双大括号" class="headerlink" title="二、插值：使用“Mustache”语法 (双大括号)"></a>二、插值：使用“Mustache”语法 (双大括号)</h1><p><strong>① 响应式改变数值</strong>：在Vue中，可以直接使用插值表达式来插入想要在页面中插入的内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span>&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">".warp"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            message:<span class="string">"使用文本插入"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;) </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时插值表达式标签就被绑定的数据对象message的值替代，只要message的数值发生改变，插值处的内容也会跟着更新。<br> <strong>② 非响应式改变数值</strong>：如果不想插入处的值跟随被绑定的数据对象的值改变，可以在标签中使用 v-once指令</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span> v-once&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">".warp"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">                message:<span class="string">"使用文本插入"</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;) </span><br><span class="line">    vm.message=<span class="string">"Hello,Vue!"</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>③ 不能识别html标签</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">".warp"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            message:<span class="string">"&lt;span&gt;Hello,Vue!&lt;/span&gt;"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;) </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上就是数据绑定最基本的用法，使用插值表达式要知道的三点知识：首先数值是可以响应式变化的；其次如果不想数值响应式变化，可以通过v-once指令限制；最后Mustache语法不能够识别HTML的标签</p>
<h1 id="三、控制HTML内容指令–v-html、v-text"><a href="#三、控制HTML内容指令–v-html、v-text" class="headerlink" title="三、控制HTML内容指令–v-html、v-text"></a>三、控制HTML内容指令–v-html、v-text</h1><p><strong>① v-html</strong>：能够识别HTML标签<br> <strong>② v-text</strong>：不能识别HTML标签</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span>&gt;          </span><br><span class="line">    &lt;p v-html=<span class="string">"message"</span>&gt;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p v-text="message"&gt;&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">            el:".warp",</span></span><br><span class="line"><span class="regexp">            data:message,</span></span><br><span class="line"><span class="regexp">        &#125;) </span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="四、控制属性指令–-v-bind"><a href="#四、控制属性指令–-v-bind" class="headerlink" title="四、控制属性指令– v-bind"></a>四、控制属性指令– v-bind</h1><p>  使用v-bind指令控制属性时，结构如下：<strong>v-bind：属性=“变量”</strong>，这样就可以动态的为某个标签绑定特定的属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.color</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:pink</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span>          </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">".warp"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                    box:<span class="string">"color"</span></span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;) </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-常用指令2</title>
    <url>/2020/03/04/Vue-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A42/</url>
    <content><![CDATA[<h1 id="一、条件语句"><a href="#一、条件语句" class="headerlink" title="一、条件语句"></a>一、条件语句</h1><h5 id="1-v-if"><a href="#1-v-if" class="headerlink" title="1.v-if"></a>1.v-if</h5><p>  用于条件性的渲染一块内容，只有当条件的返回值为真时，才会渲染该块的内容,一般默认值是true</p>
<a id="more"></a>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span>&gt;</span><br><span class="line">    &lt;div v-<span class="keyword">if</span>=<span class="string">"ok"</span>&gt;</span><br><span class="line">        Vue is perfect!</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">'.warp'</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">                ok：<span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>当设置ok为false时，div没有被渲染到浏览器中。<br>  <strong>要注意的是，为变量赋值Boolean类型时，不能加引号，加了引号就是字符串类型，字符串类型永远都为真</strong></p>
<h5 id="2-v-else-if、v-esle"><a href="#2-v-else-if、v-esle" class="headerlink" title="2.v-else-if、v-esle"></a>2.v-else-if、v-esle</h5><p>  如果v-if的条件不满足，将跳转到v-else-if，而当所有的v-else-if条件都不满足时，将会跳转到v-else。v-else-if、v-esle相当于v-if的一个分支</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span>&gt;</span><br><span class="line">    &lt;div v-<span class="keyword">if</span>=<span class="string">"type=='A'"</span>&gt;</span><br><span class="line">                A</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div v-else-if="type=='B'"&gt;</span></span><br><span class="line"><span class="regexp">                B</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;div v-<span class="keyword">else</span>&gt;</span><br><span class="line">            Not A or B</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">'.warp'</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">                type:<span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>  当为type赋值A或者B时，就会将A或者B的div渲染到浏览器中，当条件都不满足时，就会渲染最后一个div到浏览器中。<br>  <strong>要注意的是，v-else 元素要跟在带 v-if 或者 v-else-if 的元素的后面，否则它将不会被识别。</strong></p>
<h5 id="3-v-show"><a href="#3-v-show" class="headerlink" title="3.v-show"></a>3.v-show</h5><p>  v-show指令也是用于根据条件显示元素的指令，不同的是<strong>v-show不支持v-else和，并且带有 v-show 的元素</strong>始终会被渲染并保留在 DOM 中**，只是简单地切换元素的 CSS 属性 display。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span>&gt;</span><br><span class="line">    &lt;div v-show=<span class="string">"one"</span>&gt;</span><br><span class="line">        条件渲染</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">'.warp'</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">                one:<span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>  当one赋值为真时，div就会显示在浏览器中，当one赋值为false时，div就会隐藏在浏览器中。</p>
<h5 id="4-v-if-和v-show-的区别"><a href="#4-v-if-和v-show-的区别" class="headerlink" title="4. v-if 和v-show 的区别"></a>4. v-if 和v-show 的区别</h5><p>4.1 渲染元素<br>  ① v-if ：是<strong>“真正</strong>”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。<br>  ② v-show：不管初始条件是什么，元素总是会被渲染，并且只是<strong>简单地基于 CSS 进行切换</strong>。<br> 4.2 渲染条件<br>  ① v-if ：当条件结果为<strong>假</strong>时，<strong>不对元素进行渲染</strong>，直到条件为<strong>真</strong>才将元素<strong>渲染</strong><br>  ② v-show：<strong>不管初始条件是什么</strong>，都已经将<strong>元素渲染</strong>到浏览器中<br> 4.3 运行条件<br>  ① v-if：更高的切换开销，适用在<strong>运行时条件很少改变</strong>的情况下<br>  ② v-show： 有更高的初始渲染开销。如果需要非常<strong>频繁地切换</strong>，建议使用v-show<br> 以上就是条件语句常用的四条指令：v-if，v-else-if，v-else，v-show</p>
<h1 id="二、循环语句"><a href="#二、循环语句" class="headerlink" title="二、循环语句"></a>二、循环语句</h1><p>  在Vue中，for语句使用 <strong>v-for</strong> 的指令来操作，具体的结构如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"site in sites"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  其中，site可以看做是某个特定的元素，而sites则是某个元素所在的集合，可以分成以下几类：</p>
<h5 id="1-迭代整数"><a href="#1-迭代整数" class="headerlink" title="1.迭代整数"></a>1.迭代整数</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 5"</span>&gt;</span></span><br><span class="line">    &#123;&#123;n&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-迭代数组"><a href="#2-迭代数组" class="headerlink" title="2.迭代数组"></a>2.迭代数组</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in [1,2,3,4]"</span>&gt;</span></span><br><span class="line">    &#123;&#123;n&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-迭代对象"><a href="#3-迭代对象" class="headerlink" title="3.迭代对象"></a>3.迭代对象</h5><p>①通过对象的<strong>属性</strong>来迭代对象数据，其结构是： v-for =‘value in object’</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"value in stu"</span>&gt;</span></span><br><span class="line">    &#123;&#123;value&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'.warp'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            stu:&#123;</span><br><span class="line"><span class="actionscript">                    name:<span class="string">"Vue"</span>,</span></span><br><span class="line"><span class="actionscript">                    sex:<span class="string">"man"</span>,</span></span><br><span class="line"><span class="actionscript">                    hobby:<span class="string">"study"</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在用属性迭代对象数据时，v-for会对属性进行<strong>升序排序输出</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value,key) in stu"</span>&gt;</span></span><br><span class="line">    &#123;&#123;key&#125;&#125;.&#123;&#123;value&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'.warp'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            stu:&#123;</span><br><span class="line"><span class="actionscript">                    <span class="number">2</span>:<span class="string">"Vue"</span>,</span></span><br><span class="line"><span class="actionscript">                    <span class="number">3</span>:<span class="string">"man"</span>,</span></span><br><span class="line"><span class="actionscript">                    <span class="number">1</span>:<span class="string">"study"</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>② 通过 <strong>key-value</strong> 的方式迭代对象数据</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value,key) in stu"</span>&gt;</span></span><br><span class="line">    &#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'.warp'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            stu:&#123;</span><br><span class="line"><span class="actionscript">                    name:<span class="string">"Vue"</span>,</span></span><br><span class="line"><span class="actionscript">                    sex:<span class="string">"man"</span>,</span></span><br><span class="line"><span class="actionscript">                    hobby:<span class="string">"study"</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>③ 通过 <strong>索引值+键值+属性</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value,key,index) in stu"</span>&gt;</span></span><br><span class="line">    &#123;&#123;index&#125;&#125;.&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'.warp'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            stu:&#123;</span><br><span class="line"><span class="actionscript">                    name:<span class="string">"Vue"</span>,</span></span><br><span class="line"><span class="actionscript">                    sex:<span class="string">"man"</span>,</span></span><br><span class="line"><span class="actionscript">                    hobby:<span class="string">"study"</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="4-通过将数据绑定到数组来渲染列表"><a href="#4-通过将数据绑定到数组来渲染列表" class="headerlink" title="4.通过将数据绑定到数组来渲染列表"></a>4.通过将数据绑定到数组来<strong>渲染列表</strong></h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"site in sites"</span>&gt;</span></span><br><span class="line">        &#123;&#123;site.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'.warp'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            sites:[</span><br><span class="line"><span class="actionscript">                    &#123;name:<span class="string">"首页"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                    &#123;name:<span class="string">"目的地"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                    &#123;name:<span class="string">"旅游攻略"</span>&#125;</span></span><br><span class="line">                ]</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  以上就是循环语句的指令的用法，主要讲解了在不同迭代条件下的应用，比如<strong>整数，数组，对象，列表</strong>。 </p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-样式绑定</title>
    <url>/2020/03/06/Vue-%E6%A0%B7%E5%BC%8F%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h1 id="一、v-bind-style"><a href="#一、v-bind-style" class="headerlink" title="一、v-bind:style"></a>一、v-bind:style</h1><h3 id="1-静态绑定"><a href="#1-静态绑定" class="headerlink" title="1.静态绑定"></a>1.静态绑定</h3><p>  v-bind:style 的对象语法十分像 CSS，但其实是一个 <strong>JavaScript 对象</strong>。CSS 属性名可以用<strong>驼峰式</strong> (第二个单词首字母大写) 或<strong>短横线</strong>分隔来命名。在静态的样式绑定中，可以分成以下三种写法：<br> <strong>① 对象内是单一的属性</strong></p>
<a id="more"></a>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div v-bind:style=&#123;<span class="string">"width"</span>:owidth,<span class="string">'height'</span>:oheight,<span class="string">"background"</span>:obackground&#125;&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:".warp",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">                owidth:100+"px",</span></span><br><span class="line"><span class="regexp">                oheight:100+"px",</span></span><br><span class="line"><span class="regexp">                obackground:"red"</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>

<p>  在这个例子中，v-bind:style后面是一个对象，对象内部分别是 <strong>属性名：变量名</strong> 的格式，然后通过在Vue实例中为变量赋值。显然这种写法<strong>简单粗暴，代码不够整洁</strong>，所以有了第二种写法<br> <strong>② 对象语法</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">ostyle</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">                ostyle:&#123;</span><br><span class="line"><span class="actionscript">                        width:<span class="number">100</span>+<span class="string">"px"</span>,</span></span><br><span class="line"><span class="actionscript">                        height:<span class="number">100</span>+<span class="string">"px"</span>,</span></span><br><span class="line"><span class="actionscript">                        background:<span class="string">"red"</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  在这个例子中，将样式统一写在了Vue实例中的ostyle对象，相比上面第一种写法使得代码<strong>更加的简洁</strong>。<br> <strong>③ 数组语法</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">[ostyle]</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">                ostyle:&#123;</span><br><span class="line"><span class="actionscript">                        width:<span class="number">100</span>+<span class="string">"px"</span>,</span></span><br><span class="line"><span class="actionscript">                        height:<span class="number">100</span>+<span class="string">"px"</span>,</span></span><br><span class="line"><span class="actionscript">                        background:<span class="string">"red"</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  在这个例子中，只需要将对象名作为数组的元素即可，跟对象的写法很相似<br> 以上三种就是静态绑定样式的写法，下面为大家分享动态的写法</p>
<h3 id="2-动态写法"><a href="#2-动态写法" class="headerlink" title="2. 动态写法"></a>2. 动态写法</h3><p>v-bind:style 的动态写法是通过<strong>三目运算</strong>实现的，具体看如下代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div v-bind:style=&#123;<span class="string">"width"</span>:owidth,<span class="string">'height'</span>:oheight,<span class="string">"background"</span>:isRed?obackground;<span class="string">''</span>&#125;&gt;&lt;<span class="regexp">/div&gt; </span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:".warp",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">                ostyle:&#123;</span></span><br><span class="line"><span class="regexp">                        owidth:100+"px",</span></span><br><span class="line"><span class="regexp">                        oheight:100+"px",</span></span><br><span class="line"><span class="regexp">                        obackground:"red",</span></span><br><span class="line"><span class="regexp">                        isRed:false</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>

<p>  在这个例子中，如果isRed的值为true，则跳转到obackground执行，否则就为空。<br> 以上就是v-bind:style的静态和动态的写法，在有了上面的基础之后，相信大家对于v-bind:class 的写法也能很快的熟悉起来</p>
<h1 id="二、v-bind-class"><a href="#二、v-bind-class" class="headerlink" title="二、v-bind:class"></a>二、v-bind:class</h1><p>  使用v-bind:class指令绑定样式时，小编主要为大家分享动态的绑定方式，总共有两种写法：<strong>对象语法</strong>和<strong>数组语法</strong></p>
<h3 id="1-对象语法"><a href="#1-对象语法" class="headerlink" title="1.对象语法"></a>1.对象语法</h3><p>  使用对象语法来绑定样式时，又可以细分成下面5中写法：<br> <strong>① 单纯的对象</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div&#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.Active</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&#123;</span>"<span class="attr">Active</span>"<span class="attr">:isActive</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">                isActive:<span class="literal">true</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>




<p>  在这个例子中，active类是否存在，取决于isActive的取值，如果取值为真，则active类就存在，否则不存在。<strong>② 多个对象</strong>  这种写法就像在一个标签同时增加多个类的效果是一样的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div&#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.Active</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.textCol</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#00FF00</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&#123;</span>"<span class="attr">Active</span>"<span class="attr">:isActive</span>,"<span class="attr">textCol</span>"<span class="attr">:isText</span>&#125;&gt;</span>Hello,Vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">                isActive:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                isText:<span class="literal">true</span>,</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>  在这个例子中，可以通过分别设置isActive，isText的值来决定Active和textCol 两个类是否存在。<strong>③ 和普通类同时存在</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div&#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.Active</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.big</span>&#123;</span></span><br><span class="line">            color: black;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span> <span class="attr">v-bind:class</span>=<span class="string">&#123;</span>"<span class="attr">Active</span>"<span class="attr">:isActive</span>&#125;&gt;</span>Hello,Vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">                isActive:<span class="literal">true</span>,</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><strong>④ 绑定的数据对象不定义在模板中</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div&#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.Active</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.textCol</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#00FF00</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">oclass</span>&gt;</span>Hello,Vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">                oclass:&#123;</span><br><span class="line"><span class="actionscript">                        Active:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                        textCol:<span class="literal">true</span>,</span></span><br><span class="line">                    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>




<p>  这种写法比较上面的三种写法，代码会相对简洁很多<strong>⑤ 绑定的数据对象定义在计算属性</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div&#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.Active</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.textCol</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#00FF00</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">oclass</span>&gt;</span>Hello,Vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        computed:&#123;</span><br><span class="line"><span class="actionscript">                    oclass:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                            Active:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                            textCol:<span class="literal">true</span></span></span><br><span class="line">                        &#125;   </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>以上5中就是对象语法中用来绑定样式的，接下来讲解数组语法</p>
<h3 id="2-数组语法"><a href="#2-数组语法" class="headerlink" title="2.数组语法"></a>2.数组语法</h3><p>数组语法主要有三种书写的形式<br> <strong>① 普通数组</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div&#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.Active</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.textCol</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#00FF00</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[activeClass,textClass]"</span>&gt;</span>Hello,Vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">                    activeClass:<span class="string">'Active'</span>,</span></span><br><span class="line"><span class="actionscript">                    textClass:<span class="string">'textCol'</span></span></span><br><span class="line">                &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>




<p>  通过这种写法，直接把类添加在相应的变量中。也可以通过三目运算来动态的添加，这就是下面要讲的另外一种写法<strong>② 三目运算</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[isActive? activeClass : '']"</span>&gt;</span>Hello,Vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">                    isActive:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                    activeClass:<span class="string">'Active'</span>,</span></span><br><span class="line">                &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>




<p>  通过这种写法，虽然可以动态的绑定样式，但是过于，所以我们也可以在数组内使用对象的方法，这就是下面讲解的第三种写法<strong>③ 在数组内使用对象写法</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[&#123;Active:isActive&#125;,textClass]"</span>&gt;</span>Hello,Vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">                    isActive:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                    activeClass:<span class="string">'Active'</span>,</span></span><br><span class="line"><span class="actionscript">                    textClass:<span class="string">'textCol'</span></span></span><br><span class="line">                &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-模板抽离和组件数据存放</title>
    <url>/2020/03/10/Vue-%E6%A8%A1%E6%9D%BF%E6%8A%BD%E7%A6%BB%E5%92%8C%E7%BB%84%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%AD%98%E6%94%BE/</url>
    <content><![CDATA[<h1 id="一、模板抽离"><a href="#一、模板抽离" class="headerlink" title="一、模板抽离"></a>一、模板抽离</h1><h4 id="1-使用script标签"><a href="#1-使用script标签" class="headerlink" title="1.使用script标签"></a>1.使用script标签</h4><p>使用script标签，直接将原本template的内容直接复制到script下即可。</p>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cnp</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用script标签包裹template模板的内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/x-template"</span> <span class="attr">id</span>=<span class="string">"cnp1"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'cnp'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">            template:<span class="string">'#cnp1'</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'.warp'</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-2ec181b5ca685c92.png" alt="img"> </p>
<p>image.png</p>
<p>  在这个例子中，声明了全局组件cnp，并且通过script标签包裹了template的内容，内容可以正常的显示，但是要注意以下两点：<strong>① script标签的类型**</strong>x-template**<br><strong>② script标签和template的联系**</strong>script标签和template之间是没有联系的<strong><strong>选择器建立起链接</strong></strong>为script声明了id名为cnp1的id选择器<strong>**在template使用cnp1</strong></p>
<h4 id="2-使用template标签"><a href="#2-使用template标签" class="headerlink" title="2.使用template标签"></a>2.使用template标签</h4><p>  template标签的用法和普通标签的用法是一样的，直接将模板的内容赋值到该标签即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cnp</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用template标签包裹template模板的内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cnp1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'cnp'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">            template:<span class="string">'#cnp1'</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'.warp'</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-2ec181b5ca685c92.png" alt="img"> </p>
<p>image.png</p>
<p>  可以看到是同样的效果，同理，为了。比如本例中为，然后.  以上通过使用script标签和template标签就可以将组件中的模板抽离出来让代码有了更强的可读性</p>
<h1 id="二、组件数据存放"><a href="#二、组件数据存放" class="headerlink" title="二、组件数据存放"></a>二、组件数据存放</h1><p>  在前面有关组件的知识中可以发现，小编在组件的template是数据都是写死的，那么我们能不能通过使用”“这种形式来访问Vue实例中的数据呢？让我们来看一下下面的例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cnp</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cnp1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'cnp'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">            template:<span class="string">'#cnp1'</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'.warp'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                message:<span class="string">"我是标题"</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-515f24f0a24d9686.png" alt="img"> </p>
<p>image.png</p>
<p>  没有显示出mssage的内容，并且说message是未定义的。 结论：<strong>组件是不能够使用Vue实例中的data数据，说明组件应该有属于自己的数据data。</strong> 分析：  组件是一个单独功能模块的封装，即使组件可以访问Vue实例中的数据，但是如果将所有数据都放在Vue实例中，Vue实例就会变得非常臃肿【因为前面提到，所有的组件最终会形成一棵组件树】</p>
<h4 id="1-组件数据存放"><a href="#1-组件数据存放" class="headerlink" title="1.组件数据存放"></a>1.组件数据存放</h4><p>  按照上面是思路，组件会有自己的data属性，然后我们将message变量放在data属性中，代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cnp1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'cnp'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">        template:<span class="string">'#cnp1'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">                title:<span class="string">"我是标题"</span></span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-865a3445541fd4dc.png" alt="img"> </p>
<p>image.png</p>
<p>  由结果可以看出，并不想Vue实例中的data一样是一个对象，而，所以组件中data的书写应该如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cnp1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'cnp'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">        template:<span class="string">'#cnp1'</span>,</span></span><br><span class="line"><span class="actionscript">        data:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    title:<span class="string">"我是标题"</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-12fa928733bf1f35.png" alt="img"> </p>
<p>image.png</p>
<p> 因此，对于组件数据的存放总结一下几点：  ① 也属于自己的<br><strong>data是一个函数**</strong>实例对象**  ③<br><strong>method**</strong>只有data属性必须是一个函数**</p>
<p>接下来我们讨论一个很严肃的问题:</p>
<h1 id="为什么组件中的data是一个函数而不是对象？"><a href="#为什么组件中的data是一个函数而不是对象？" class="headerlink" title="为什么组件中的data是一个函数而不是对象？"></a>为什么组件中的data是一个函数而不是对象？</h1><p>这个缘由我们的先从函数说起。先来看下面的代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obje= &#123;</span><br><span class="line">            name:<span class="string">'why'</span>,</span><br><span class="line">            age:<span class="number">18</span>,</span><br><span class="line">        &#125;   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obje</span><br><span class="line">&#125;   </span><br><span class="line">    <span class="keyword">let</span> obje1 = abc();</span><br><span class="line">    <span class="keyword">let</span> obje2 = abc();</span><br><span class="line">    <span class="keyword">let</span> obje3 = abc();</span><br><span class="line"></span><br><span class="line">    obje1.name=<span class="string">'Hello'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'obje1.name:'</span>+ obje2.name);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'obje2.name:'</span>+ obje2.name);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'obje3.name:'</span>+ obje3.name);</span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-beffe009171d7ef1.png" alt="img"> </p>
<p>image.png</p>
<p>  由图可知他们是。其实可以这样子理解：声明的obje对象就代表了一块（假设内存地址为0x110），函数abc返回obje对象时其实就是返回了0x110，不管调用多少次，。当obje1修改的那么值时，其实就相当于修改了内存地址存储的name值，所以obje2和obje3的值也会发生改变。具体如下图：</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-0ff441b1f3c708c5.png" alt="img"> </p>
<p>函数.png</p>
<p> 接下来我们再来看一段代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">            name:<span class="string">'why'</span>,</span><br><span class="line">            age:<span class="number">18</span>,</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> obje1 = abc();</span><br><span class="line">    <span class="keyword">let</span> obje2 = abc();</span><br><span class="line">    <span class="keyword">let</span> obje3 = abc();</span><br></pre></td></tr></table></figure>

<p>  在上面的代码中，定义了一个名字为abc的函数，并且返回一个对象，该对象有name属性和age属性，然后调用三次abc函数并以此存储在变量obje1，obje2，obje3中。那我们思考一下，obje1、obje2、obje3是不是同一个对象？<br>  结论是** 它们并不是同一个对象<strong>，因为函数每次被调用的时候，都会在自己的</strong>栈空间创建很多的变量<strong>。想要验证是不是同一个对象其实很简单，如果是同一个对象，有一个特点：</strong>牵一发而动全身**，我们修改obje1的值，如果obje2和obje3的值也跟着改变，说明是同一个对象，否则就不是，让我们来看下面的例子：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">obje1.name=<span class="string">'Hello'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obje1.name:'</span>+ obje2.name);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obje2.name:'</span>+ obje2.name);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obje3.name:'</span>+ obje3.name);</span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-e65e785965126b8d.png" alt="img"> </p>
<p>image.png</p>
<p>  可以发现，obje2和obje3的值么有发生变化，说明他们不是同一个对象，具体分析如下：  声明的，因为每次调用函数时，函数都会在自己的栈空间创建，所以，相当于，而，具体如下图所示：</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-1372b9a115fd88f8.png" alt="img"> </p>
<p>函数.png</p>
<p>  这也就是为什么组件数据存放是函数而不是属性的原因<br>  组件是具有特定功能的单独的个体，<strong>我们希望在页面1中定义的组件也能在页面2中使用，如果组件的数据存储不是函数，当我们修改页面1中的组件就会导致页面2中的组件也发生改变</strong>，这是我们不希望看到的。下面通过例子来为大家讲解：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cnp</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cnp</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cnp</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cnp1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'increment'</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'decrement'</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'cnp'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">            template:<span class="string">'#cnp1'</span>,</span></span><br><span class="line"><span class="actionscript">            data:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    title:<span class="string">"当前数值："</span>,</span></span><br><span class="line">                    counter:0</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                increment()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.counter ++;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                decrement()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.counter --;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'.warp'</span>,</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-d69ad1f65e2e54e2.gif" alt="img"> </p>
<p>组件.gif</p>
<p>  在这里例子中，我们在组件中用了简单的计数器。这是我们希望看到的效果，当点击第一个计数器，不会影响到下面两个计数器，而如果把组件中的数据代码块换成下面这就写法，就会产生十分恐怖的事情：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obje = &#123;</span><br><span class="line">            title:<span class="string">"当前数值："</span>,</span><br><span class="line">            counter:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">Vue.component(<span class="string">'cnp'</span>,&#123;</span><br><span class="line">    template:<span class="string">'#cnp1'</span>,</span><br><span class="line">    data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> obje</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-e6f307b9622ec327.gif" alt="img"> </p>
<p>组件.gif</p>
<p>  所以这就是为什么在开发Vue的时候，组件数据存储的data必须是函数而不是属性。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-父子组件和语法糖</title>
    <url>/2020/03/09/Vue-%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E5%92%8C%E8%AF%AD%E6%B3%95%E7%B3%96/</url>
    <content><![CDATA[<h1 id="一、父组件和子组件"><a href="#一、父组件和子组件" class="headerlink" title="一、父组件和子组件"></a>一、父组件和子组件</h1><p>在进行定义之前，小编觉得先上一段实例会比较让大家容易理解</p>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fatcnp</span>&gt;</span><span class="tag">&lt;/<span class="name">fatcnp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> cnp1 = Vue.extend(&#123;</span></span><br><span class="line">            template:`</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">            `</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> cnp2 = Vue.extend(&#123;</span></span><br><span class="line">            template:`</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">soncnp</span>&gt;</span><span class="tag">&lt;/<span class="name">soncnp</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">            `,</span><br><span class="line">            components:&#123;</span><br><span class="line">                soncnp:cnp1,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'.warp'</span>,</span></span><br><span class="line">            components:&#123;</span><br><span class="line">                fatcnp:cnp2</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  在这个例子中可以看到一下几点：<br> <strong>① 声明构造器</strong>：和以往声明构造器一样，本例子中<strong>声明了两个构造器cnp1和cnp2</strong>；<br> <strong>② 注册组件</strong>：可以看到，组件2在Vue中注册，是一个局部组件，但是组件1的注册既不是全局组件的注册方式，也不是局部组件的注册方式，而是在<strong>构造器cnp2中使用conponents的属性来声明</strong><br> <strong>③ 使用组件</strong>：组件2在定义的Vue实例中使用，是规范的；但是组件1却是在组件2的<strong>template的模板</strong>中使用的。让我们来看看效果图</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-65a4aa39fb2ccb5c.png" alt="img"> </p>
<p>image.png</p>
<p> 可以发现组件1和组件2的内容都显示出来了，</p>
<h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h4><p>  <strong>① 子组件</strong>：将组件2的<strong>注册放在</strong>组件1的<strong>构造器</strong>中，并且将组件2的<strong>使用放在</strong>组件1的<strong>template</strong>中，那么组件2就是子组件<br>  <strong>② 父组件</strong>：如果组件1的<strong>构造器有</strong>组件2的<strong>注册</strong>并且组件1的<strong>template模板内容有组件2的使用</strong>，说明组件1是组件2的父组件</p>
<h4 id="2-渲染的过程"><a href="#2-渲染的过程" class="headerlink" title="2.渲染的过程"></a>2.渲染的过程</h4><p>  当父组件在页面中使用时，浏览器在渲染父组件template内容的同时也将子组件识别并渲染到页面中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fatcnp</span>&gt;</span><span class="tag">&lt;/<span class="name">fatcnp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> cnp1 = Vue.extend(&#123;</span></span><br><span class="line">            template:`</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">            `</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> cnp2 = Vue.extend(&#123;</span></span><br><span class="line">            template:`</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">soncnp</span>&gt;</span><span class="tag">&lt;/<span class="name">soncnp</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">            `,</span><br><span class="line">            components:&#123;</span><br><span class="line">                soncnp:cnp1,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'.warp'</span>,</span></span><br><span class="line">            components:&#123;</span><br><span class="line">                fatcnp:cnp2</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  同样也是刚刚的例子，当父组件cnp2在页面中使用时，浏览器就会到组件cnp2的构造器综寻找template。当浏览器浏览到<soncnp></soncnp>标签时，会发生下面两件事情：   ① 检测标签是否注册：浏览器首先会在父级组件的构造器中寻找是否定义了<soncnp></soncnp>标签，如果在父组件的构造器中没有找到，就会到全局组件寻找是否有<soncnp></soncnp>标签的注册   ② 标签替换成template的内容：当浏览器找到有<soncnp></soncnp>标签注册时，就会进一步找该标签的组件cnp1中的template内容，并将<soncnp></soncnp>标签替换成cnp1中template内容‘<div><h1>我是标题1</h1><p>我的内容</p></div>’。</p>
<h4 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3.注意事项"></a>3.注意事项</h4><p>  <strong>①子组件的使用范围</strong>：子组件的使用范围一般在父组件的template中。就像上面的例子，<strong>当cnp2组件已经被浏览器识别时，标签已经被替换成了cnp1中template内容，所以是没有标签的</strong>，如果在div中使用<soncnp></soncnp>标签，就会报该标签没有被定义的错误。<br> 下面的案例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span>&gt;</span><br><span class="line">    &lt;fatcnp&gt;&lt;<span class="regexp">/fatcnp&gt;</span></span><br><span class="line"><span class="regexp">    &lt;soncnp&gt;&lt;/</span>soncnp&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-b5779760d44dfcde.png" alt="img"> </p>
<p>image.png</p>
<p>  可以发现，页面中仅仅显示了组件2的内容而没有显示组件1的内容。，比如：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'.warp'</span>,</span><br><span class="line">    components:&#123;</span><br><span class="line">        fatcnp:cnp2,</span><br><span class="line">        soncnp:cnp1</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-7f5fbaf1e11a3c5e.png" alt="img"> </p>
<p>image.png</p>
<p> 另外，在补充一个关于Vue实例的一个知识点：<strong>我们知道，在注册局部组件时，是在Vue实例中注册的，这个做法和子组件在父组件中的注册是一样的，所以我们可以说，Vue是所有组件的root组件。</strong></p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-e332aba7a1d513dc.png" alt="img"> </p>
<p>image.png</p>
<h1 id="二、语法糖"><a href="#二、语法糖" class="headerlink" title="二、语法糖"></a>二、语法糖</h1><h4 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1.定义"></a>1.定义</h4><p>  语法糖的出现是因为<strong>Vue注册组件太过繁琐</strong>，为了简化这个过程，就出现了注册语法糖。<br>  所谓语法糖就是在<strong>注册组件时省去了Vue.extend()的步骤，而直接通过一个对象来替代</strong>。可以分成<strong>全局语法糖</strong>和<strong>局部语法糖</strong></p>
<h4 id="2-全局语法糖"><a href="#2-全局语法糖" class="headerlink" title="2.全局语法糖"></a>2.全局语法糖</h4><p>  在定义全局组件的时候，不再创建构造器，而是直接在<strong>注册组件的第二个参数传递template对象</strong>，其代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cnp1</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'cnp1'</span>,&#123;</span></span><br><span class="line">            template:`</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是全局语法糖<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是全局语法糖的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">            `</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'.warp'</span>,</span></span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-50c7cde8acac627a.png" alt="img"> </p>
<p>image.png</p>
<p>  在这个例子中可以看到，已经没有创建组件构造器，而是在注册组件的第二个参数【原本第二个参数是组件构造器的名字】直接传入了template对象，这就是全局组件注册的语法糖。</p>
<h4 id="3-局部组件注册语法糖"><a href="#3-局部组件注册语法糖" class="headerlink" title="3.局部组件注册语法糖"></a>3.局部组件注册语法糖</h4><p>  在定义局部组件的时候，不再创建构造器，而是<strong>直接在注册组件的第二个参数传递template对象</strong>，其代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cnp2</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'.warp'</span>,</span></span><br><span class="line">            components:&#123;</span><br><span class="line">                cnp2:&#123;</span><br><span class="line">                    template:`</span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是局部语法糖<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是局部局语法糖的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">                    `</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-126912d1851365a6.png" alt="img"> </p>
<p>image.png</p>
<p>  在这个例子中可以看到，也没有再创建组件构造器，而是直接将template作为对象传递到components中。</p>
<h4 id="4-语法糖的本质"><a href="#4-语法糖的本质" class="headerlink" title="4.语法糖的本质"></a>4.语法糖的本质</h4><p>  语法糖的本质其实也有调用到Vue.extend()方法的，<strong>当浏览器浏览到template时，就会自动调用Vue.extend()方法。</strong>相比前面的三步骤使用组件，使用语法糖会变得更加的简洁。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-父子组件的通信</title>
    <url>/2020/03/11/Vue-%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h1 id="一、通信产生的原因"><a href="#一、通信产生的原因" class="headerlink" title="一、通信产生的原因"></a>一、通信产生的原因</h1><p>  在正常的开发过程中，我们<strong>从服务器获取到了大量数据</strong>。其中一部分数据并不是显示整个页面的大组件中，而是需要在下面的子组件进行展示。这个时候<strong>并不是让子组件再次发送数据请求信息给服务器，而是让大组件向服务器请求信息并将数据传递给小组件</strong>。比如看下面的例子：<br> <a id="more"></a></p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-18a1a30efba90b2a.png" alt="img"> </p>
<p>组件通信原因.png</p>
<p> 下面我们从父组件和子组件两个方面来分析为何父组件和子组件之间要有通信<strong>① 父组件**</strong>向服务器发送数据请求信息的是页面大组件（父组件）而不是小组件<strong>**为了避免服务器不瘫痪，使用父组件向服务器发送请求信息并获取数据，将获取到的数据放在父组件的data中</strong><br><strong>② 子组件**</strong>子组件不能获取父组件或者Vue实例中的data数据<strong>**父组件和子组件之间的通信</strong></p>
<h1 id="二、如何进行通信"><a href="#二、如何进行通信" class="headerlink" title="二、如何进行通信"></a>二、如何进行通信</h1><p>在进行父子组件之间的通信时，有下面两种方式：<br> <strong>① 父传子：通过props</strong><br> <strong>② 子传父：通过自定义事件</strong></p>
<h4 id="在这里小编先讲解父组件传递给子组件"><a href="#在这里小编先讲解父组件传递给子组件" class="headerlink" title="在这里小编先讲解父组件传递给子组件"></a>在这里小编先讲解父组件传递给子组件</h4><h5 id="1-props书写步骤"><a href="#1-props书写步骤" class="headerlink" title="1.props书写步骤"></a>1.props书写步骤</h5><p>  在本次案例中，为避免组件数量过多，小编<strong>将Vue当做父组件</strong>【前面提到过，Vue实例是root组件，可以当做所有组件的父组件】，为了方便理解，小编从两个步骤说明如何实现父传子<br> <strong>①书写父组件和子组件的基本构造：</strong><br> 就像我们平常书写父子组件一样</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tem"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'.warp'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">                message:<span class="string">'我是标题'</span>,</span></span><br><span class="line"><span class="actionscript">                movies:[<span class="string">'海贼王'</span>,<span class="string">'海王'</span>,<span class="string">'海尔兄弟'</span>]</span></span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            cnp:&#123;</span><br><span class="line"><span class="actionscript">                template:<span class="string">'#tem'</span>,</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码分析如下：<br>  <strong>1.1 父组件</strong>：Vue实例作为父组件，其中的messag和movies存放父组件从服务器获取的数据【当然，小编这个没有连接服务器，只是为了以后真正从服务器获取数据时能知道数据存放在哪里】<br>  <strong>1.2 子组件</strong>：使用<strong>语法糖</strong>的格式声明了<strong>局部组件cnp</strong>，并且通过<strong>模板抽离</strong>将template的模板的内容抽离到template标签中，两者通过tem id名来建立起联系<br> 那么下一步，小编就将父组件中的数据通过props传递到子组件中<br> <strong>② 通过props实现父组件和子组件之间的通信：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cnp</span> <span class="attr">v-bind:cmessage</span>=<span class="string">'message'</span> <span class="attr">v-bind:cmovies</span>=<span class="string">'movies'</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tem"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;cmessage&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;cmovies&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">components:&#123;</span><br><span class="line">    cnp:&#123;</span><br><span class="line">            template:'#tem',</span><br><span class="line">            props:['cmessage','cmovies']</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!--为了便于代码的观看，其余部分已经被小编删除，后序会有完整的代码  --&gt;</span></span><br></pre></td></tr></table></figure>

<p>  <strong>2.1 使用props声明变量</strong>：props的写法和Vue实例中methods的写法很相似，只不过这里小编用数组来存放变量，<strong>这个变量就是后期要引用的变量名</strong><br>  <strong>2.2 通过v-bind实现通信</strong>：在使用<cnp></cnp>标签引用组件时，为了将Vue实例中的数据传递到cnp组件中，<strong>使用v-bind操作cmessage属性和cmovies属性</strong>，引用上一步声明的变量名cmessage和cmovies，接着为变量赋值cmessage=’message’和cmovies=’movies’<br>  <strong>2.3 显示数据</strong>： 经过前两个步骤，数据已经从Vue传递到cnp子组件中，接下来就是<strong>在子组件的模板template中引用子组件声明的变量名</strong>即可，比如本例子引用cmessage和cmovies<br> <strong>注意：不能引用Vue实例中的message和movies，因为子组件是不能操作父组件的数据</strong><br> 下面是完成的代码和效果：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cnp</span> <span class="attr">v-bind:cmessage</span>=<span class="string">'message'</span> <span class="attr">v-bind:cmovies</span>=<span class="string">'movies'</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tem"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;cmessage&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;cmovies&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue.min.js"</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'.warp'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                message:<span class="string">'我是标题'</span>,</span></span><br><span class="line"><span class="actionscript">                movies:[<span class="string">'海贼王'</span>,<span class="string">'海王'</span>,<span class="string">'海尔兄弟'</span>]</span></span><br><span class="line">            &#125;,</span><br><span class="line">            components:&#123;</span><br><span class="line">                cnp:&#123;</span><br><span class="line"><span class="actionscript">                    template:<span class="string">'#tem'</span>,</span></span><br><span class="line"><span class="actionscript">                    props:[<span class="string">'cmessage'</span>,<span class="string">'cmovies'</span>]</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-89fd79b860ae0d24.png" alt="img"> </p>
<p>image.png</p>
<p>  可以看到数据已经成功的从父组件传递到了子组件中，如果你不想要以数组的形式显示数据，遍历并显示即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tem"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;cmessage&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">"item in cmovies"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-03be204c92561030.png" alt="img"> </p>
<p>image.png</p>
<h4 id="2-props-类型"><a href="#2-props-类型" class="headerlink" title="2.props 类型"></a>2.props 类型</h4><p>props支持的类型很多，主要有：String，Number, Boolean, Array, Object, Data, FunctionSymbol。下面小编主要为大家分享<strong>数组类型</strong>和<strong>对象类型</strong> 。</p>
<h5 id="①-数组类型"><a href="#①-数组类型" class="headerlink" title="① 数组类型"></a>① 数组类型</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">components</span>:&#123;</span><br><span class="line">  <span class="attribute">cnp</span>:&#123;</span><br><span class="line">      template:<span class="string">'#tem'</span>,</span><br><span class="line">      props:[<span class="string">'cmessage'</span>,<span class="string">'cmovies'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  这种写法虽然简洁，但是看起来有点别扭，因为cmessage是一个变量而不是字符串【因为字符串都是用引号包裹着的】，所以一般在开发的过程中，都采用对象类型。</p>
<h5 id="②-对象类型"><a href="#②-对象类型" class="headerlink" title="② 对象类型"></a>② 对象类型</h5><p><strong>2.1 基本对象类型</strong><br> 就是在对象内部声明变量的类型，比如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">components</span>:&#123;</span><br><span class="line">    <span class="attribute">cnp</span>:&#123;</span><br><span class="line">            template:<span class="string">'#tem'</span>,</span><br><span class="line">            props:&#123;</span><br><span class="line">                    cmessage:String,</span><br><span class="line">                    cmovies:Array</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>  本例中声明cmessage是字符串类型，cmovies是数组类型。<br> <strong>2.2 有默认值的对象类型–default</strong><br>  使用了default属性的变量，在没有被传递数据时，就会显示默认值【如果传递了数据，默认值就被数据覆盖了】。<strong>默认值的书写方式又和变量的类型有关,主要分为当变量是String类型和当变量是数组类型或者是对象类型两种情况</strong></p>
<p><strong>2.2.1 变量是String类型</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">components</span>:&#123;</span><br><span class="line">    <span class="attribute">cnp</span>:&#123;</span><br><span class="line">            template:<span class="string">'#tem'</span>,</span><br><span class="line">            props:&#123;</span><br><span class="line">                    cmessage:&#123;</span><br><span class="line">                            type:String,</span><br><span class="line">                            default:<span class="string">'aaaa'</span></span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  这个例子中，将cmessage的值变成了一个对象，然后在对象内部定义cmessage的类型是String，默认值是aaaa。</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-45c1b2056cc59895.png" alt="img"> </p>
<p>默认值为aaaa.png</p>
<p><strong>2.2.2 变量是数组类型或者对象类型时</strong>  当cmessage是数组类型是，如果我们是这样子书写： default：[]，在Vue 2.5.17一下是不通过的，比如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">props</span>:&#123;</span><br><span class="line">        <span class="attribute">cmessage</span>:&#123;</span><br><span class="line">                    type:Array,</span><br><span class="line">                    default:[]</span><br><span class="line">                &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-c24bbf2a51df3a7c.png" alt="img"> </p>
<p>image.png</p>
<p>  默认值是无效的，如果默认值的类型是数组或者对象类型，，也就是要修改成下面的代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">props</span>:&#123;</span><br><span class="line">        <span class="attribute">cmessage</span>:&#123;</span><br><span class="line">                type:Array,</span><br><span class="line">                <span class="built_in">default</span>()&#123;</span><br><span class="line">                        return []</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  此外，就像刚刚开头提到的，如果在使用了default后还传递数据，新数据就会覆盖默认值。比如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!-- 没有默认值 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span>&gt;</span><br><span class="line">        &lt;cnp  v-bind:cmessage=<span class="string">'message'</span> v-bind:cmovies=<span class="string">'movies'</span>&lt;<span class="regexp">/cnp&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">        </span><br><span class="line">&lt;!-- 有默认值 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span>&gt;</span><br><span class="line">        &lt;cnp v-bind:cmovies=<span class="string">'movies'</span>&gt;&lt;<span class="regexp">/cnp&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-8507f37d2dcd44c9.png" alt="img"> </p>
<p>没有默认值.png</p>
<p> 默认值aaaa已经被“我是标题”覆盖了<strong>2.3 有必传值的对象类型–require</strong>  当组件中的变量使用required属性时，意味着，否则就会把报错，比如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span>&gt;</span><br><span class="line">    &lt;cnp&gt;&lt;<span class="regexp">/cnp&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">components:&#123;</span><br><span class="line">    cnp:&#123;</span><br><span class="line">            template:<span class="string">'#tem'</span>,</span><br><span class="line">            props:&#123;</span><br><span class="line">                    cmessage:&#123;</span><br><span class="line">                            type:<span class="built_in">String</span>,</span><br><span class="line">                            required:<span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-6724062c1184b71a.png" alt="img"> </p>
<p>image.png</p>
<p>  在组件cnp的变量cmessage中使用了required属性，但是在使用组件cnp时，并没有给cmessage传递数值，这时就会报错 ，因此，如果使用了required属性时，一定要给变量传递数据，比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 有给cmessage传递数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cnp</span> <span class="attr">v-bind:cmessage</span>=<span class="string">'message'</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 没有给cmessage传递数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cnp</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-props-驼峰标识"><a href="#3-props-驼峰标识" class="headerlink" title="3.props 驼峰标识"></a>3.props 驼峰标识</h5><p>  所谓的驼峰标识其实就是<strong>指两个单词拼接在一起，第二个单词的首字母是大写</strong>。比如：myMovies就是驼峰标识。<br>  在Vue中，<strong>使用v-bind指令，是不支持驼峰标识的，需要将第二个单词的首字母用 “ 横线 小写”代替”</strong>。比如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span>&gt;</span><br><span class="line">    &lt;cnp :cMessage=<span class="string">"message"</span>&gt;&lt;<span class="regexp">/cnp&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;template id=<span class="string">"tem"</span> &gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;cMessage&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;  </span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:'.warp',</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">                message:'我是标题',</span></span><br><span class="line"><span class="regexp">                movies:['海贼王','海王','海尔兄弟']</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        components:&#123;</span></span><br><span class="line"><span class="regexp">            cnp:&#123;</span></span><br><span class="line"><span class="regexp">                    template:'#tem',</span></span><br><span class="line"><span class="regexp">                    props:&#123;</span></span><br><span class="line"><span class="regexp">                        cMessage:&#123;</span></span><br><span class="line"><span class="regexp">                            type:String,</span></span><br><span class="line"><span class="regexp">                            default:'aaaa',</span></span><br><span class="line"><span class="regexp">                        &#125;</span></span><br><span class="line"><span class="regexp">                    &#125;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-87368c7ac55c9743.png" alt="img"> </p>
<p>效果图.png</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-fdf6fd54301dd796.png" alt="img"> </p>
<p>控制台.png</p>
<p>  在这个例子中，我们希望就父组件Vue中的message数据传递到子组件cnp的cMessage中，但是从效果图中可以看到，并没有传递成功。这是因为在子组件使用v-bind指令操作变量时，变量使用的是驼峰标识【<cnp :cMessage="message"></cnp>】，在目前Vue的版本中是不允许的，因此需</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span>&gt;</span><br><span class="line">    &lt;cnp :c-message=<span class="string">"message"</span>&gt;&lt;<span class="regexp">/cnp&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-2c9a666a4e76900b.png" alt="img"> </p>
<p>image.png</p>
<p>  如果变量名是 cMyLoveMovies，同理，需要修改成“c-my-love-movies”</p>
<h5 id="1-通信目的：为了减少访问服务器是访问频率"><a href="#1-通信目的：为了减少访问服务器是访问频率" class="headerlink" title="1.通信目的：为了减少访问服务器是访问频率"></a>1.通信目的：为了减少访问服务器是访问频率</h5><h5 id="2-props的书写方式"><a href="#2-props的书写方式" class="headerlink" title="2.props的书写方式"></a>2.props的书写方式</h5><h5 id="2-props的类型很多种，这里主要讲了数组和对象两种类型"><a href="#2-props的类型很多种，这里主要讲了数组和对象两种类型" class="headerlink" title="2.props的类型很多种，这里主要讲了数组和对象两种类型"></a>2.props的类型很多种，这里主要讲了数组和对象两种类型</h5><h5 id="2-1-当props是对象类型时，可以有type，default，required属性"><a href="#2-1-当props是对象类型时，可以有type，default，required属性" class="headerlink" title="  2.1 当props是对象类型时，可以有type，default，required属性"></a>  2.1 当props是对象类型时，可以有type，default，required属性</h5><h5 id="2-2-default是字符串时的写法和default是数组或者对象的写法"><a href="#2-2-default是字符串时的写法和default是数组或者对象的写法" class="headerlink" title="  2.2 default是字符串时的写法和default是数组或者对象的写法."></a>  2.2 default是字符串时的写法和default是数组或者对象的写法.</h5><p>3.props的驼峰标识</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-父子组件的通信2</title>
    <url>/2020/03/11/Vue-%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E9%80%9A%E4%BF%A12/</url>
    <content><![CDATA[<h1 id="一、使用场景"><a href="#一、使用场景" class="headerlink" title="一、使用场景"></a>一、使用场景</h1><p>  子组件向父组件传递数据，一般发生在类似table栏的原理，如果不太清楚table栏原理的小伙伴可以参考下面小编的讲解分析，如果已经明白table栏原理的小伙伴可以直接跳过这块内容。让我们先来看下面的图：<br> <a id="more"></a></p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-bdd3f80ba69bf666.gif" alt="img"> </p>
<p>table栏原理.gif</p>
<p><strong>① table栏原理</strong>  table主要分成和。当用户点击‘智能先锋’的小标题，下面的内容区就会显示与智能先锋相关的内容；当用户点击“居家优品”的小标题，下面的内容区就会与显示居家优品相关的内容，这就是table栏原理<strong>② 子组件传递数据到父组件</strong>  按照组件化的思想，table栏的标题区为一个组件，内容区为一个组件。内容区的子组件的数据都是来自父组件的。当用户点击了标题为“家用电器”的子组件，我们希望内容区仅仅展示家用电器的内容，这个时候的父组件要知道用户点击了“家用电器”的子组件才能将家用电器的内容传递到内容区。 具体步骤如下：<strong>书写父子组件的基本构造–&gt;子组件自定义事件 –&gt; 父组件捕获事件 –&gt; 父组件对捕获的事件进行处理</strong></p>
<h1 id="二、实现步骤"><a href="#二、实现步骤" class="headerlink" title="二、实现步骤"></a>二、实现步骤</h1><p>为便于理解，本次案例的模型的下图：</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-1485175478c0092f.png" alt="img"> </p>
<p>image.png</p>
<h4 id="1-书写父子组件的基本构造"><a href="#1-书写父子组件的基本构造" class="headerlink" title="1. 书写父子组件的基本构造"></a>1. 书写父子组件的基本构造</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父组件的模板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cnp</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 子组件的模板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-for</span>=<span class="string">'item in title'</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 子组件注册</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> cnp = &#123;</span></span><br><span class="line"><span class="actionscript">            template:<span class="string">'#btn'</span>,</span></span><br><span class="line">            data()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line">                    title:[</span><br><span class="line"><span class="actionscript">                        &#123;id:<span class="string">'one'</span>,name:<span class="string">'热门推荐'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;id:<span class="string">'two'</span>,name:<span class="string">'家用电器'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;id:<span class="string">'three'</span>,name:<span class="string">'手机数码'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;id:<span class="string">'four'</span>,name:<span class="string">'居家优品'</span>&#125;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'.warp'</span>,</span></span><br><span class="line">            components:&#123;</span><br><span class="line">                cnp</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>① 子组件的数据</strong><br>  前面已经提到过，子组件不能操作父组件或者Vue实例中的数据，所以用自己的data函数存放，返回值是对象类型。在对象内声明title变量，类型是数组类型，数组内的元素又是一个对象【因为一个元素可能包含很多信息，所以元素用对象来存储】<br> <strong>② 子组件的模板</strong><br>  模板中使用了四个bottom，通过v-for指令来遍历子组件中的title.name数据并显示在按钮中。效果图如下：</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-082455653e9f4bae.png" alt="img"> </p>
<p>image.png</p>
<h4 id="2-子组件自定义事件"><a href="#2-子组件自定义事件" class="headerlink" title="2.子组件自定义事件"></a>2.子组件自定义事件</h4><p>  <strong>子组件的自定义事件时为了让子组件内部知道用户操作了哪个组件</strong>，因此要用事件监听用户的操作，并且对用户的操作进行处理。比如：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//绑定事件来监听用户的操作</span></span><br><span class="line">&lt;button v-<span class="keyword">for</span>=<span class="string">'item in title'</span> <span class="meta">@click</span>=<span class="string">"btnclick(item)"</span>&gt;</span><br><span class="line">    &#123;&#123;item.name&#125;&#125;</span><br><span class="line">&lt;/button&gt;</span><br><span class="line"><span class="comment">//在子组件内部对用户操作进行处理</span></span><br><span class="line"><span class="keyword">const</span> cnp = &#123;</span><br><span class="line">                template:<span class="string">'#btn'</span>,</span><br><span class="line">                <span class="keyword">data</span>()&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        title:[</span><br><span class="line">                            &#123;id:<span class="string">'one'</span>,name:<span class="string">'热门推荐'</span>&#125;,</span><br><span class="line">                            &#123;id:<span class="string">'two'</span>,name:<span class="string">'家用电器'</span>&#125;,</span><br><span class="line">                            &#123;id:<span class="string">'three'</span>,name:<span class="string">'手机数码'</span>&#125;,</span><br><span class="line">                            &#123;id:<span class="string">'four'</span>,name:<span class="string">'居家优品'</span>&#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                methods:&#123;</span><br><span class="line">                    btnclick(item)&#123;</span><br><span class="line">                        console.log(item)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>在本例子中，从以下两点来理解：<br> <strong>① 子组件绑定事件：</strong>通过点击事件来监听用户操作了哪个标题，并且希望用户点击这个标题的时候把该标题的所有信息都传递到自己的组件内容，所以为button绑定btnclick事件并且传递参数item<br> <strong>② 子组件对事件的处理：</strong>当为button绑定了btnclick事件后，在子组件内部就需要对该事件处理。在这里，当用户点击了热门推荐，就在控制台中打印这个标题的所有信息，效果如下：</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-b476f5cd670d1536.png" alt="img"> </p>
<p>image.png</p>
<h4 id="3-父组件捕获事件"><a href="#3-父组件捕获事件" class="headerlink" title="3.父组件捕获事件"></a>3.父组件捕获事件</h4><p>  <strong>父组件要根据被点击的子组件去请求该子组件的数据</strong>，这个过程通过自定义事件实现。简单的说就是将子组件获取的item传递给父组件。具体步骤可以分成下面三步：<br> <strong>① 子组件通过 “this.$emit(自定义事件名，传递的数据)” 发射事件</strong><br> <strong>② 父组件 “v-on或者@” 捕获事件</strong><br> <strong>③ 父组件对事件进行处理</strong><br> 代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ②父组件捕获事件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cnp</span> @<span class="attr">itemclick</span>=<span class="string">'cnpclick'</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-for</span>=<span class="string">'item in title'</span> @<span class="attr">click</span>=<span class="string">"btnclick(item)"</span>&gt;</span></span><br><span class="line">                &#123;&#123;item.name&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> cnp = &#123;</span></span><br><span class="line"><span class="actionscript">            template:<span class="string">'#btn'</span>,</span></span><br><span class="line">            data()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line">                    title:[</span><br><span class="line"><span class="actionscript">                        &#123;id:<span class="string">'one'</span>,name:<span class="string">'热门推荐'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;id:<span class="string">'two'</span>,name:<span class="string">'家用电器'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;id:<span class="string">'three'</span>,name:<span class="string">'手机数码'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;id:<span class="string">'four'</span>,name:<span class="string">'居家优品'</span>&#125;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                btnclick(item)&#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">//① 子组件发射事件给父组件</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.$emit(<span class="string">'itemclick'</span>,item)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'.warp'</span>,</span></span><br><span class="line">            components:&#123;</span><br><span class="line">                cnp</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// ③父组件对事件进行处理</span></span></span><br><span class="line">                cnpclick(item)&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(item)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码的分析如下：<br> <strong>① 子组件发射事件–this.$emit(‘itemclick’,item)</strong>：我们知道，对于事件的处理都在methods方法内部。所以在这个例子中，对用户点击事件btnclick的处理就是向父组件发射名字为itemclick的事件并且传递参数item。<br> <strong>② 父组件捕获事件–</strong>：当子组件向父组件发射itemclick事件后，父组件通过v-on指令或者@来捕获子组件发射的itemclick事件并对事件的处理放在方法cnpclick中<br> <strong>③ 父组件捕获事件后的处理–cnpclick(item)</strong>：父组件对事件的处理放在了cnpclick方法中，因此在父组件内部的methods方法内部才有了cnpclick(item)函数。效果图如下：</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-4d325783e9b1063a.png" alt="img"> </p>
<p>子传父.png</p>
<p> 当点击子组件的“热门推荐”，父组件就会打印“热门推荐”的信息</p>
<p>  父组件和子组件通信中的子组件向父组件传递数据，总结起来就是：<strong>子组件发射事件，父组件捕获事件后并进行处理。</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-组件化思想</title>
    <url>/2020/03/09/Vue-%E7%BB%84%E4%BB%B6%E5%8C%96%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<h1 id="一、组件化思想"><a href="#一、组件化思想" class="headerlink" title="一、组件化思想"></a>一、组件化思想</h1><h4 id="1-引例"><a href="#1-引例" class="headerlink" title="1. 引例"></a>1. 引例</h4><p>  人在处理逻辑十分复杂的问题时，往往不知从何处下手，但是人有一种本能，就是<strong>把复杂的东西简单化</strong>，把一个复杂的问题划分成若干个小问题，<strong>然后逐一逐一解决小问题</strong>，当把所有的小问题都解决完时，你就会发下复杂的问题已经被你解决了。组件化也是同样的思想</p>
<a id="more"></a>

<h4 id="2-定义"><a href="#2-定义" class="headerlink" title="2. 定义"></a>2. 定义</h4><p>  如果将一个页面中的逻辑功能全部放在一块（比如一个页面的逻辑功能放在一个.js文件中或者.vue文件中），处理起来十分麻烦，并且不利于后期的维护和拓展新的功能（因为代码量太多，如果让你去维护别人写的十多万行的代码，你肯定十分头疼）而组件化的思想就是<strong>将一个页面的功能拆分成很多的小功能块，每个小功能快独立完成自己的功能</strong>。比如下面的例子：</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-50dd383925aed2a6.png" alt="img"> </p>
<p>组件.png</p>
<p> ① 将一个页面<br><strong>组件内**</strong>继续划分成组件** ③ 每个组件自己模块的相关功能 ④ 每个组件完成功能后再到页面中 这就是组件化的基本思路，利用组件化，可以非常容易管理和维护这个页面的功能</p>
<h4 id="3-Vue组件化思想"><a href="#3-Vue组件化思想" class="headerlink" title="3. Vue组件化思想"></a>3. Vue组件化思想</h4><p>  组件化在Vue中的应用，就是提供了一种<strong>抽象</strong>的思想，让我们可以开发出一个个<strong>独立且可以重复使用的小组件</strong>来构造我们的应用，并且<strong>任何的应用都被抽象成组件树</strong>，比如下图：</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-19685d7b16ffde87.png" alt="img"> </p>
<p>组件数.png</p>
<p> ① 我们可以将（比如首页为一个组件，详情页为一个组件） ② 页面内部也可以看成一个组件（比如首页中，导航栏 nav为一个组件，主要内容section为一个组件） ③ 将每个组件逐渐的细化，就构成了一棵。</p>
<h1 id="二、使用组件的步骤"><a href="#二、使用组件的步骤" class="headerlink" title="二、使用组件的步骤"></a>二、使用组件的步骤</h1><p>在Vue中使用组件可以分成三个步骤： <strong>创建组件构造器–&gt;注册组件–&gt;使用组件</strong>，下面针对这三个步骤进行详细是说明</p>
<h4 id="1-创建组件构造器"><a href="#1-创建组件构造器" class="headerlink" title="1.创建组件构造器"></a>1.创建组件构造器</h4><p><strong>首先，拿到Vue对象并使用extend方法</strong><br> 注解：<br> ① Vue对象在我们导入了vue.js文件中已经存在，所以可以直接使用<br> ② extend方法传递的参数是一个<strong>对象</strong>（和创建Vue实例的用法一样）<br> <strong>其次，声明一个构造器，格式如下： const + 构造器名字</strong><br> <strong>最后，使用template属性创建构造器的模板</strong>（就是一部分功能块的HTML结构）<br> 代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line">        template:`</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line">            `</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  在这个例子中，使用了Vue中的<strong>extend</strong>方法传递了属性为<strong>template</strong>的对象，最后将这个对象赋值给构造器 <strong>cpnC</strong><br>  和以往定义字符串不同的是，此处用的不是单引号，而是一个<strong>小撇</strong> ` 。小撇和单双引号的功能一样可以用来定义字符串，不过小撇比单双引号多的功能就是<strong>可以实现换行</strong></p>
<h4 id="2-注册组件"><a href="#2-注册组件" class="headerlink" title="2.注册组件"></a>2.注册组件</h4><p>  注册组件使用Vue中的<strong>component方法</strong>，需传递两个参数，第一个参数是<strong>组件标签名</strong>【即应该用什么样的标签来使用组件】，第二个参数是<strong>组件构造器的名字</strong>【就是在第一步创建构造器的名字】，代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-cpn'</span>,cpnC)</span><br></pre></td></tr></table></figure>

<h4 id="3-使用组件"><a href="#3-使用组件" class="headerlink" title="3.使用组件"></a>3.使用组件</h4><p>直接通过步骤二声明的<strong>组件标签名</strong>使用即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结合上面三个步骤，给出完整的代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line">            template:`</span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">            `</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'my-cpn'</span>,cpnC)</span></span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#warp'</span>,</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-dc51afbc3764619f.png" alt="img"> </p>
<p>image.png</p>
<h4 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4.注意事项"></a>4.注意事项</h4><p><strong>① 使用组件的范围</strong>： 使用组件的范围，必须是<strong>在Vue实例中使用</strong>，如果不在Vue实例中使用是不会生效的<br> 例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"warp"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line">            template:`</span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">            `</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'my-cpn'</span>,cpnC)</span></span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#warp'</span>,</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  Vue实例的范围是id名为warp的div，而组件的使用却在div之外，这是不允许的<br> <strong>② template模板</strong>：书写template模板是时候，如果有多条的HTML语句，最好<strong>用div包裹起来</strong>，如果不用div包裹起来，在多条的HTML语句中，仅仅显示第一条。<br> 例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line">            template:`</span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line">            `</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'my-cpn'</span>,cpnC)</span></span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#warp'</span>,</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-605a1eeb5e37f3a5.png" alt="img"> </p>
<p>image.png</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-组件插槽</title>
    <url>/2020/03/14/Vue-%E7%BB%84%E4%BB%B6%E6%8F%92%E6%A7%BD/</url>
    <content><![CDATA[<h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p>  上面最佳的解决办法是<strong>将共性抽取到组件中，将不同暴露给插槽</strong>，一旦我们<strong>使用了插槽，就相当于预留了空间</strong>，<strong>空间的内容取决于使用者</strong>。具体呢可以分成以下两种用法：</p>
<a id="more"></a>

<h5 id="1-使用空插槽"><a href="#1-使用空插槽" class="headerlink" title="1.使用空插槽"></a>1.使用空插槽</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cnp</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cnp</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cnp</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tem"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#warp"</span>,</span></span><br><span class="line">            components:&#123;</span><br><span class="line">                cnp:&#123;</span><br><span class="line"><span class="actionscript">                    template:<span class="string">"#tem"</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-3db271400f5de21e.png" alt="img"> </p>
<p>image.png</p>
<p>  将第二个子组件的按钮变成span标签，将第三个子组件的按钮变成i标签，只需要引入slot标签，然后在cnp标签添加内容即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第一步：在子组件模板使用slot标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tem"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第一步：在子组件cnp标签填充内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cnp</span>&gt;</span><span class="tag">&lt;<span class="name">buton</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">buton</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cnp</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cnp</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>我是i标签<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-6965efa99cf0265c.png" alt="img"> </p>
<p>image.png</p>
<p>  使用了slot标签，就相当于预留了空间，空间的内容取决于使用者。比如本例子中，，比如第一个slot的内容就被button标签替换了，第二个slot的内容就被span标签替换了。</p>
<h5 id="2-有默认值的插槽"><a href="#2-有默认值的插槽" class="headerlink" title="2.有默认值的插槽"></a>2.有默认值的插槽</h5><p>  这种情况一般是，总共有十个东西，八个的内容是一样的，只有两个内容不一样情况。比如接着上面的例子，小编想第一个子组件和第二个子组件都是按钮，第三个子组件是span标签，只需要在slot标签填充默认的内容即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tem"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cnp</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cnp</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cnp</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-c9a5874122625dc1.png" alt="img"> </p>
<p>image.png</p>
<p>  为什么这里的第一个cnp和第二个cnp标签没有内容也有东西显示出来呢？因为slot有默认的button。当cnp没有写内容的时候，就显示slot默认的内容；当cnp写了内容，原本slot默认的内容就会被覆盖。<br>  其实小编很好奇【因为小编是好奇宝宝，哈哈哈O(∩_∩)O哈哈~】如果是下面这种情况，slot的内容会被那个标签替换呢？</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cnp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>呵呵呵<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span>&gt;</span>嘻嘻嘻<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  被“哈哈哈”替代？被“呵呵呵”替代？被“嘻嘻嘻”替代？那么究竟花落谁家呢？让我们拭目以待吧!</p>
<p>骗你的，其实下面就有答案：</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-3bb79be89d951ade.png" alt="img"> </p>
<p>image.png</p>
<p>  事实证明，slot被三个标签同时替代了！也就是说会被cnp标签的所有内容替换掉，记住了嘛？这个是小黑板的知识点唷o()o</p>
<h1 id="四、具名插槽"><a href="#四、具名插槽" class="headerlink" title="四、具名插槽"></a>四、具名插槽</h1><p>  什么是具名插槽呢？简单的理解就是<strong>给slot起名字</strong>，为什么要起名字呢？因为有名字我们才好区分，<strong>才好让使用者对某个特定名字的插槽进行不同的操作</strong>。比如：</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-57bc3bed18d6cab8.png" alt="img"> </p>
<p>image.png</p>
<p> 三个页面的导航栏不一样，那么我们就需要在子组件cnp的模板中用三个插槽</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template id=<span class="string">"tem"</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;slot&gt;&lt;&lt;<span class="regexp">/slot&gt;</span></span><br><span class="line"><span class="regexp">        &lt;slot&gt;购物车&lt;/</span>slot&gt;</span><br><span class="line">        &lt;slot&gt;···&lt;<span class="regexp">/slot&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-cb0e74eef8e9cff6.png" alt="img"> </p>
<p>image.png</p>
<p>  可以发现，通过给solt设置默认值是可以实现这个样式的。但是呢，我们子组件一般都提倡复用，在第一个页面可能有“购物车”这个样式，第二个页面未必有这个样式，如果每调用一次子组件就修改slot的默认值，你会发现这是一件非常错误的事情。<br> 所以我们通过具名插槽来实现，具体看下面的代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template id=<span class="string">"tem"</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;slot name=<span class="string">"left"</span>&gt;&lt;<span class="regexp">/slot&gt;</span></span><br><span class="line"><span class="regexp">        &lt;slot name="center"&gt;&lt;/</span>slot&gt;</span><br><span class="line">        &lt;slot name=<span class="string">"right"</span>&gt;&lt;<span class="regexp">/slot&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="warp"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;cnp&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span slot="left"&gt;&lt;&lt;/</span>span&gt;</span><br><span class="line">        &lt;span slot=<span class="string">"center"</span>&gt;购物车&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span slot="right"&gt;···&lt;/</span>span&gt;</span><br><span class="line">    &lt;<span class="regexp">/cnp&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>

<p>  <strong>首先我们为插槽起了名字，然后在使用的时候，只要告诉某个标签，你的内容想显示在那个插槽，就写入那个插槽的名字</strong>。就像去参加</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-组件访问之子访父</title>
    <url>/2020/03/12/Vue-%E7%BB%84%E4%BB%B6%E8%AE%BF%E9%97%AE%E4%B9%8B%E5%AD%90%E8%AE%BF%E7%88%B6/</url>
    <content><![CDATA[<h1 id="一、通过-parent"><a href="#一、通过-parent" class="headerlink" title="一、通过$parent"></a>一、通过$parent</h1><p>用法其实很简单，先书写基本的代码【父组件和子组件的模板】:</p>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父组件模板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cnp</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 子组件模板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tem"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是cnp组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#warp"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                message:<span class="string">"我是Vue实例"</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 子组件cnp的注册</span></span></span><br><span class="line">            components:&#123;</span><br><span class="line">                cnp:&#123;</span><br><span class="line"><span class="actionscript">                    template:<span class="string">"#tem"</span></span></span><br><span class="line">                &#125;   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  Vue的地位山不可摧，依旧是我们的父组件，声明了子组件cnp为局部组件。<br> 接下来小编希望点击按钮的时候，能够访问Vue实例中的message数据。通过$parent实现如下：<br> <strong>第一步：为按钮绑定点击事件</strong><br> <strong>第二部：在子组件内部对点击事件进行处理，访问父组件的message</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一步：为按钮绑定btnClick点击事件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tem"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是cnp组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick()"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第二部：在子组件对点击事件进行处理，访问父组件的message--&gt;</span></span><br><span class="line">components:&#123;</span><br><span class="line">    cnp:&#123;</span><br><span class="line">        template:"#tem",</span><br><span class="line">        methods:&#123;</span><br><span class="line">            btnClick()&#123;</span><br><span class="line">                console.log(this.$parent);</span><br><span class="line">                console.log(this.$parent.message)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-b97a17fbfb693a56.png" alt="img"> </p>
<p>image.png</p>
<p>  很好，这个妖孽很乖，不必本大圣用绝招了显出了原型。此时访问的是Vue而不是Vuecomponent。因为Vue才是cnp的父组件嘛，所以按道理显示Vue。并且通过this.$parent.message可成功的访问了Vue实例中的数据。<br>  什么？你想访问通过parent来访问cnp？很简单的吖，只需要在子组件cnp内部在嵌套一个子组件ccnp就可以啦。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- cnp模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tem"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是cnp组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ccnp</span>&gt;</span><span class="tag">&lt;/<span class="name">ccnp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ccnp模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"ccnptem"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是ccnp组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick()"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">components:&#123;</span><br><span class="line">    cnp:&#123;</span><br><span class="line">        template:"#tem",</span><br><span class="line">        components:&#123;</span><br><span class="line">            ccnp:&#123;</span><br><span class="line">                    template:"#ccnptem",</span><br><span class="line">                    methods:&#123;</span><br><span class="line">                        btnClick()&#123;</span><br><span class="line">                            console.log(this.$parent);      </span><br><span class="line">                            console.log(this.$parent.name)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-188e833ad31fd7d7.png" alt="img"> </p>
<p>image.png</p>
<p>  这里就是。然后通过$parent来访问cnp中的name数据。  这种用法一般很少见。，什么？不懂耦合度？简单理解就是有太多的牵扯，失去的人人身自由  因为我们。如果将ccnp子组件复用在首页和详情页，首页有name属性，但是详情页没有name属性，是不是就不太妥了。  所以通过parent来访问组件是少见的。就想吃长大了的孩子，已经很少有机会回家陪父母一样。</p>
<h1 id="二、访问根组件"><a href="#二、访问根组件" class="headerlink" title="二、访问根组件"></a>二、访问根组件</h1><p>  好了，为了回馈广大读者，小编在此格外赠送一个知识点：root，<strong>通过root我们可以很直接的访问Vue组件</strong>，只需要将上面的parent换成root即可：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// console.log(this.$parent);</span></span><br><span class="line"><span class="comment">// console.log(this.$parent.name)</span></span><br><span class="line"><span class="comment">//通过$root访问跟组件</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">this</span>.$root);                                </span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">this</span>.$root.message)</span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-4ebe94425e31b28e.png" alt="img"> </p>
<p>image.png</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-组件访问之父访子</title>
    <url>/2020/03/12/Vue-%E7%BB%84%E4%BB%B6%E8%AE%BF%E9%97%AE%E4%B9%8B%E7%88%B6%E8%AE%BF%E5%AD%90/</url>
    <content><![CDATA[<h1 id="一、通过-children"><a href="#一、通过-children" class="headerlink" title="一、通过$children"></a>一、通过$children</h1><p>  children是复数，就意味着<strong>父组件通过children拿到的可能不止一个子组件</strong>，因为在Vue中明文规定是可以让父组件拥有一个或者多个子组件的。就像是二胎政策的开放，国家已经规定夫妻间可以拥有多个孩子一样。<br>  <strong>所以如果父组件通过$children拿到子组件的对象，一定要具体到是哪一个孩子。</strong>就像你父母在叫孩子的时候，一定会叫特殊昵称一样。下面小编为你们展示如何通过children访问子组件，先看下面的基础代码：</p>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cnp</span>&gt;</span><span class="tag">&lt;/<span class="name">cnp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">".warp"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            components:&#123;</span><br><span class="line">                cnp:&#123;</span><br><span class="line"><span class="actionscript">                    template:<span class="string">"#tmp"</span>,</span></span><br><span class="line">                    methods:&#123;</span><br><span class="line">                        showMessage()&#123;</span><br><span class="line"><span class="actionscript">                            alert(<span class="string">'我是通过$children访问的函数'</span>)</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  子组件cnp为局部组件，并且有一个showMessage的方法，当调用这个方法就会弹出对话框。父组件依旧是我们的Vue老大，模板中有子组件cnp和按钮两个小老弟。<br>  下面小编希望当点击按钮的时候就通过$children来访问子组件中的showMessage方法。很明显，<strong>首先要为button绑定点击事件，然后在点击事件内部通过children来访问子组件中的showMessage方法。</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为按钮绑定点击事件</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span>&gt;</span><br><span class="line">    &lt;cnp&gt;&lt;<span class="regexp">/cnp&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="btnClick"&gt;按钮&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/在Vue老大的method方法中处理btnClick事件</span></span><br><span class="line"><span class="regexp">methods:&#123;</span></span><br><span class="line"><span class="regexp">    btnClick()&#123;</span></span><br><span class="line"><span class="regexp">        console.log(this.$children);</span></span><br><span class="line"><span class="regexp">        this.$children[0].showMessage()</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p>我们先来看看它到底是个啥玩意儿：</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-fc7c1f34732e4f0b.png" alt="img"> </p>
<p>$children是这玩意儿.png</p>
<p>  没错，它是【别问我为啥知道，因为它有中括号】数组内的元素是VueComponent,也就是说是，并且也有一个children,子组件的children为一个空数组，因为它还没有孩子，所以children的内容是空的，最后也有showMessage函数。</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-07d4ececca01604b.gif" alt="img"> </p>
<p>效果图.gif</p>
<p>  可以看到，当点击按钮的时候确实弹出了弹出框的内容。  但是，每个孩子都不是完美的，金无足赤人无完人，也有他缺陷。，这就注定了它不是个完美的孩子，比如：</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-ec4bd1bab162be3f.png" alt="img"> </p>
<p>image.png</p>
<p>  原来只有三个子组件，想要访问第三个组件的话，通过this.$children[2]就可以获取，但是，保不准哪天遇到了奇葩客户，增加了很多无厘头的需求，然后父组件的模板就变成了下面的样子:</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-dc94ce8617a7de6b.png" alt="img"> </p>
<p>image.png</p>
<p>  我依旧不忘初心，想要访问第三个cnp，由于中间杀出了很多程咬金，我需要将下标值改成6才可以获取到。这就是children的缺陷，所以才产生了下面的方法：</p>
<h1 id="二、通过refs"><a href="#二、通过refs" class="headerlink" title="二、通过refs"></a>二、通过refs</h1><p>  既然都是访问子组件的，那么想必他们的用法是一样的，于是小编就信心满满的写成了下面的样子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    btnClick()&#123;</span><br><span class="line">            console.<span class="built_in">log</span>(<span class="keyword">this</span>.$refs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果是这样的：</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-389fdfba1d710835.png" alt="img"> </p>
<p>image.png</p>
<p>  天真了吧。傻了吧。它真不是个东西，是一个空对象！后来经过小编七七四十九天的炼制，终于炼出了灵丹妙药来惩治这个妖孽：于是乎就有了下面的代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span>&gt;</span><br><span class="line">    &lt;cnp&gt;&lt;<span class="regexp">/cnp&gt;</span></span><br><span class="line"><span class="regexp">    &lt;cnp&gt;&lt;/</span>cnp&gt;</span><br><span class="line">    &lt;!--第一步：为子组件绑定ref=“a”的属性--&gt;</span><br><span class="line">    &lt;cnp ref=<span class="string">'a'</span>&gt;&lt;<span class="regexp">/cnp&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="btnClick"&gt;按钮&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">methods:&#123;</span></span><br><span class="line"><span class="regexp">    btnClick()&#123;</span></span><br><span class="line"><span class="regexp">            console.log(this.$refs.a);</span></span><br><span class="line"><span class="regexp">            &lt;!--第二步：通过refs访问子组 --&gt;</span></span><br><span class="line"><span class="regexp">            this.$refs.a.showMessage();</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-761705b5712f4fe4.gif" alt="img"> </p>
<p>refe访问子组件.gif</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-8f8069d80d9f39f2.png" alt="img"> </p>
<p>image.png</p>
<p> 妖孽成功的降服了！而且看到这个妖孽是一个对象类型的。  要注意，比如本例中的属性值是a，所以使用的时候是this.$refs.a.XXXX。至于为什么要加上ref属性呢，因为这样相当于 <strong>做了标志，不管前面增加多少个标签，访问的依旧是属性值为a的子组件</strong>。 </p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-表单操作1</title>
    <url>/2020/03/08/Vue-%E8%A1%A8%E5%8D%95%E6%93%8D%E4%BD%9C1/</url>
    <content><![CDATA[<h1 id="一、v-model-双向绑定的本质"><a href="#一、v-model-双向绑定的本质" class="headerlink" title="一、v-model 双向绑定的本质"></a>一、v-model 双向绑定的本质</h1><p>  在使用v-model操作表单元素之前，相信大家在很多的资料中看到过v-model能实现双向绑定，那么什么又是双向数据绑定呢？<br>  所谓的双向绑定可以简单的理解为：<strong>修改model中的值，页面的值会改变；修改了页面的值，model的值也会发生变化</strong>。比如：</p>
<a id="more"></a>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span>  @click.prevent&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"message"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>form&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue (&#123;</span><br><span class="line">        el:<span class="string">".warp"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">                message:<span class="string">"Hello,Vue"</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>① model到页面的绑定</strong>：在控制台中通过vm.message=”vue”命令修改message的值，会发现页面中输入框和段落的message值也变化成vue，效果如下图：</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-a80c36f09a88907f.png" alt="img"> </p>
<p><strong>② 页面到model的绑定</strong></p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-1db86f0674eb925f.png" alt="img"> </p>
<p> 其实v-model事项双向绑定的本质很简单，就是通过两个简单的指令</p>
<h4 id="①-通过v-bind-绑定属性，实现model到页面的绑定"><a href="#①-通过v-bind-绑定属性，实现model到页面的绑定" class="headerlink" title="① 通过v-bind 绑定属性，实现model到页面的绑定"></a>① 通过v-bind 绑定属性，实现model到页面的绑定</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue (&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">                    message:<span class="string">"Hello,Vue"</span>,</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  在这个例子中，通过在控制台输入 console.log(“vue”) 修改message的值，发现段落 p的值也变成了 vue 。这就是model绑定页面的本质。具体效果见下图：</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-7390ca261a31f36b.png" alt="img"> </p>
<h4 id="②-通过监听-输入框的input事件，实现页面到model的绑定"><a href="#②-通过监听-输入框的input事件，实现页面到model的绑定" class="headerlink" title="② 通过监听 输入框的input事件，实现页面到model的绑定"></a>② 通过监听 输入框的input事件，实现页面到model的绑定</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind</span>=<span class="string">"message"</span> <span class="attr">v-on:input</span>=<span class="string">"changeMessage"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue (&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="actionscript">                    changeMessage:<span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.message=event.target.value;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  通过监听 输入框的input事件，实现页面到model的绑定的思路就是，每单输入框的内容改变时，就将新的内容赋值给message。<br>  <strong>首先，input事件主要用来监听用户输入的数据</strong>，当用户在输入框输入数据时，就会跳转到method中的changeMessage内部执行，所以将新内容赋值给message的代码应该写在changeMessage函数内部；<br>  其次，<strong>一旦在界面中产生事件，浏览器就会自生成event对象</strong>，所以我们需要一个参数来讲输入框的内容实时传递给message，而event就充当这样的角色，而<strong>event.target.value</strong>就是用来获取输入框中最新的value值，因此也可以有下面的写法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind</span>=<span class="string">"message"</span> <span class="attr">v-on:input</span>=<span class="string">"message=$event.target.value"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue (&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  这个写法，就会将赋值语法放置在了模板中，大大简化了代码量<br>  综上所述，v-model实现双向绑定的实质是 v-bind 和v-on:input两个指令的结合。</p>
<h2 id="另外，v-model仅仅适用于表单元素（input、radio、textarea、selected、checkbox）"><a href="#另外，v-model仅仅适用于表单元素（input、radio、textarea、selected、checkbox）" class="headerlink" title="另外，v-model仅仅适用于表单元素（input、radio、textarea、selected、checkbox）"></a>另外，v-model仅仅适用于表单元素（input、radio、textarea、selected、checkbox）</h2><h1 id="二、v-model在-input、textarea的应用"><a href="#二、v-model在-input、textarea的应用" class="headerlink" title="二、v-model在 input、textarea的应用"></a>二、v-model在 input、textarea的应用</h1><h4 id="1-v-model在input中的应用"><a href="#1-v-model在input中的应用" class="headerlink" title="1.v-model在input中的应用"></a>1.v-model在input中的应用</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-v-model在textarea中的应用"><a href="#2-v-model在textarea中的应用" class="headerlink" title="2.v-model在textarea中的应用"></a>2.v-model在textarea中的应用</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="三、v-model-和radio的结合使用"><a href="#三、v-model-和radio的结合使用" class="headerlink" title="三、v-model 和radio的结合使用"></a>三、v-model 和radio的结合使用</h1><p>  v-model和radio的结合使用，意思就是当用户点击单选框时，将单选框的内容修改到model中。</p>
<h4 id="1-单选框没有默认值"><a href="#1-单选框没有默认值" class="headerlink" title="1.单选框没有默认值"></a>1.单选框没有默认值</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>&gt;</span>男</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"female"</span> <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你所选择的性别是:&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue (&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            sex:<span class="string">' '</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-65a2068f41a03b42.png" alt="img"> </p>
<p>  首先，将input的类型修改为radio才是单选框；<br>  其次，input输入框要有value值，如果没有value值，没有办法将选框的内容修改到model中的sex；<br>  最后，使用v-model 来达到双向绑定。这里在两个单选框中设置一样的v-model是因为传递给后台数据的时候才能达到互斥的效果，实现真正意义上的单选框【和通过设置相同的name值实现互斥的效果是一样的】。</p>
<h4 id="2-单选框有默认值"><a href="#2-单选框有默认值" class="headerlink" title="2.单选框有默认值"></a>2.单选框有默认值</h4><p>  如果想让单选框一开始就有默认值，很简单，在Vue实例中修改sex的值即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>&gt;</span>男</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"female"</span> <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你所选择的性别是:&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue (&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            sex:<span class="string">'男 '</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-cc3a59b71202532e.png" alt="img"> </p>
<h1 id="四、v-model-和checkbox结合使用"><a href="#四、v-model-和checkbox结合使用" class="headerlink" title="四、v-model 和checkbox结合使用"></a>四、v-model 和checkbox结合使用</h1><h4 id="1-单个多选框"><a href="#1-单个多选框" class="headerlink" title="1.单个多选框"></a>1.单个多选框</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"agree"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"agree"</span> <span class="attr">v-model</span>=<span class="string">"isAgree"</span>&gt;</span>同意协议</span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;isAgree&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue (&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            isAgree:<span class="literal">false</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-f14799680ca4891a.png" alt="img"> </p>
<p>  当点击同意是，结果为true，当不同意是，结果就为false<br>  通过v-model实现双向绑定单个多选框的关键是存储的值是布尔类型，单个多选框的应用场景如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"agree"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"agree"</span> <span class="attr">v-model</span>=<span class="string">"isAgree"</span>&gt;</span>同意协议</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">"!isAgree"</span>&gt;</span>下一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-57ec3b3288290100.gif" alt="img"> </p>
<p>当用户点击同意协议时，才能进行下一步的操作</p>
<h4 id="2-多个多选框"><a href="#2-多个多选框" class="headerlink" title="2.多个多选框"></a>2.多个多选框</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"语文"</span> <span class="attr">v-model</span>=<span class="string">"subject"</span>&gt;</span>语文</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"数学"</span> <span class="attr">v-model</span>=<span class="string">"subject"</span>&gt;</span>数学</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"英语"</span> <span class="attr">v-model</span>=<span class="string">"subject"</span>&gt;</span>英语</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"化学"</span> <span class="attr">v-model</span>=<span class="string">"subject"</span>&gt;</span>化学</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你喜欢的科目是:&#123;&#123;subject&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue (&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            subject:[]</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  当有多个多选框时，我们需要用数组来存储用户点击的数据，这样子方便后去传给后台的时候是一整条数据传递过去的</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-表单操作2</title>
    <url>/2020/03/08/Vue-%E8%A1%A8%E5%8D%95%E6%93%8D%E4%BD%9C2/</url>
    <content><![CDATA[<h1 id="一、v-model-在select-中的应用"><a href="#一、v-model-在select-中的应用" class="headerlink" title="一、v-model 在select 中的应用"></a>一、v-model 在select 中的应用</h1><p>多选框 checkbox类似，v-model在select中的应用也可以分为两类</p>
<h4 id="1-单选"><a href="#1-单选" class="headerlink" title="1. 单选"></a>1. 单选</h4><a id="more"></a>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span> &gt;</span><br><span class="line">    &lt;select v-model=<span class="string">"subject"</span>&gt;</span><br><span class="line">        &lt;option value =<span class="string">"语文"</span>&gt;语文&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">        &lt;option value ="数学"&gt;数学&lt;/</span>option&gt;</span><br><span class="line">        &lt;option value =<span class="string">"英语"</span>&gt;英语&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">        &lt;option value ="化学"&gt;化学&lt;/</span>option&gt;</span><br><span class="line">    &lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;你喜欢的科目是:&#123;&#123;subject&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm  = new Vue (&#123;</span></span><br><span class="line"><span class="regexp">        el:".warp",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">                subject:''</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-a04a3089a357e3a6.gif" alt="img"> </p>
<p>  在这个例子中，当用户点击语文，就会将语文传递到model中的subject变量，从而实现页面到model的双向绑定。 要注意两点：  第一点：，option是作为select的选项，因为传递的数据是下拉框的内容而不是下拉框的选项，所以要将v-model绑定在select中  第二点：</p>
<h4 id="2-多选"><a href="#2-多选" class="headerlink" title="2.多选"></a>2.多选</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span> &gt;</span><br><span class="line">    &lt;select v-model=<span class="string">"subject"</span> multiple&gt;</span><br><span class="line">        &lt;option value =<span class="string">"语文"</span>&gt;语文&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">        &lt;option value ="数学"&gt;数学&lt;/</span>option&gt;</span><br><span class="line">        &lt;option value =<span class="string">"英语"</span>&gt;英语&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">        &lt;option value ="化学"&gt;化学&lt;/</span>option&gt;</span><br><span class="line">    &lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;你喜欢的科目是:&#123;&#123;subject&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm  = new Vue (&#123;</span></span><br><span class="line"><span class="regexp">        el:".warp",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">                subject:[]</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-91c9c1c4b446865d.gif" alt="img"> </p>
<p> 在这个例子中，用户按下Ctrl 键后可以进行多选 这里同样要注意两点：  第一点：，而不是简单的字符串。因为用户进行的是多选，提交到后台的数据应该是用户所选定的所有数据  第二点：。如果没有增加multiple无法实现同时选择多个的功能。 结合上面两大点进行一个总结：<strong>① v-model绑定的位置**</strong>select**<br><strong>② 保存值的类型**</strong>单选<strong><strong>字符串</strong></strong>多选<strong><strong>数组</strong></strong>③ 实现多选的关键<strong>**增加 multiple</strong></p>
<h1 id="二、值绑定"><a href="#二、值绑定" class="headerlink" title="二、值绑定"></a>二、值绑定</h1><p>  相信很多读者跟小编一样，很困惑什么是值绑定，简单的说，就是<strong>动态的书写value的值</strong>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span> &gt;</span><br><span class="line">    &lt;select v-model=<span class="string">"subject"</span> multiple&gt;</span><br><span class="line">        &lt;option value =<span class="string">"语文"</span>&gt;语文&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">        &lt;option value ="数学"&gt;数学&lt;/</span>option&gt;</span><br><span class="line">        &lt;option value =<span class="string">"英语"</span>&gt;英语&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">        &lt;option value ="化学"&gt;化学&lt;/</span>option&gt;</span><br><span class="line">    &lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;你喜欢的科目是:&#123;&#123;subject&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm  = new Vue (&#123;</span></span><br><span class="line"><span class="regexp">        el:".warp",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">                subject:[]</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>

<p>  比如在这段代码中，我们是直接将value的值写成语文，数学，英语写死了，在正常的开发中，这些值应该从后台发送过来的数据获取，所以我们就需要根据后台发送过来的数据动态的追加这些value值。具体的用法如下：</p>
<h4 id="首先，对原始数据的处理："><a href="#首先，对原始数据的处理：" class="headerlink" title="首先，对原始数据的处理："></a>首先，对原始数据的处理：</h4><p><strong>1.存放</strong>：在Vue实例的data中声明一个<strong>数组</strong>，用来存<strong>原始数据</strong><br> <strong>2.取数</strong>：使用<strong>for 循环</strong>逐一遍历原始数组中的每个元素，并赋值给value</p>
<h4 id="其次，和用户交互的数据"><a href="#其次，和用户交互的数据" class="headerlink" title="其次，和用户交互的数据"></a>其次，和用户交互的数据</h4><p><strong>1.存放</strong>：在Vue实例的data中声明一个<strong>数组</strong>，用来存<strong>用户操作过的数据</strong><br> <strong>2.显示</strong>：通过<strong>v-model</strong>达到双向绑定，将用户操作的数据显示在页面中<br> 代码如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"warp"</span> &gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">""</span> v-<span class="keyword">for</span>=<span class="string">"item in originSubject"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"checkbox"</span> v-bind:value=<span class="string">'item'</span> v-model=<span class="string">"newSubject"</span>&gt;&#123;&#123;item&#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;你喜欢的科目是:&#123;&#123;newSubject&#125;&#125;&lt;/</span>p&gt; </span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm  = new Vue (&#123;</span></span><br><span class="line"><span class="regexp">        el:".warp",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">                originSubject:['语文','数学','英语','历史'],</span></span><br><span class="line"><span class="regexp">                newSubject:[]</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-c0eea6989c8a696e.gif" alt="img"> </p>
<p>  在这个例子中，首先在data声明数组用来存放原始的数据，然后遍历在originSubject数组中的数据并将数据传递到input的value值中，这是原始数据的操作；其次也在data中声明的用来存放用户操作过的数据，通过将用户操作过的数据显示在页面中，这是用户操作过的数据的处理。  以上就是关于值绑定的小分享，说白了其实就是</p>
<h1 id="三、修饰符"><a href="#三、修饰符" class="headerlink" title="三、修饰符"></a>三、修饰符</h1><p>  在事件监听的时候小编也为大家分享过一些时间有关的修饰符，这里的修饰符主要针对表单元素的修饰符，主要有三种：<strong>lazy、number、trim</strong></p>
<h4 id="1-lazy"><a href="#1-lazy" class="headerlink" title="1.lazy"></a>1.lazy</h4><p><strong>① lazy出现的原因</strong>： v-model在事项双向数据绑定的时候会出现一个问题：<strong>一旦有数据发生改变，对应的data中的数据也会发生变化，修改的太频繁</strong>，比如：用户输入了6个a，每输入一个a都要重新修改message的值，而现实中我们只<strong>希望当用户输入完成的时候才修改相应的值</strong>，这个时候就出现了lazy修饰符</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/21260932-396601e8cb272896.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/280/format/webp" alt="img"></p>
<p><strong>② 定义**</strong>失去焦点<strong>**回车</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.lazy</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-396601e8cb272896.gif" alt="img"> </p>
<p>由图可知，当输入框失去焦点时才将数据修改到data中</p>
<h4 id="2-number"><a href="#2-number" class="headerlink" title="2.number"></a>2.number</h4><p><strong>① number 出现的原因</strong>： 使用v-model传递的数据，不管输入的值字母还是数字，<strong>默认都是字符串类型</strong>，可以通过下面的例子进行理解：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;-&#123;&#123;typeof age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue (&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">                age:<span class="string">''</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-f948a15fc2ea39d3.gif" alt="img"> </p>
<p>  会发现即使输入的是数字，类型依旧是字符串类型。也有读者可能会问，是不是因为一开始就在data中定义了age为字符串类型，所以才会显示字符串类型，那么小编将age定义为number类型后：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;-&#123;&#123;typeof age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue (&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">                age:0</span><br><span class="line">            &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="https:////upload-images.jianshu.io/upload_images/21260932-15916c96506f5444.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/280/format/webp" alt="img"></p>
<p>  可以看到，即使一开始将数据定义为number，但是经过v-model的双向绑定后依旧转换成了string类型，这就是在使用v-model时可能会出现的类型转换问题，如果想要输入的数字是number类型，可以通过.number修饰符<strong>② 定义**</strong>换成number类型**</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;-&#123;&#123;typeof age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue (&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">".warp"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">                age:0</span><br><span class="line">            &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-15916c96506f5444.gif" alt="img"> </p>
<p>在经过number修饰符的处理后，成功的将数字转换成了number类型</p>
<h4 id="3-trim"><a href="#3-trim" class="headerlink" title="3.trim"></a>3.trim</h4><p><strong>① trim出现的原因</strong>：用户可能会在数据的<strong>首尾输入很多的空格</strong>，这个时候我们希望将空格去除，比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>您输入的信息是:&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-5abb021b8efcaab2.png" alt="img"> </p>
<p>  因为浏览器有空白折叠现象，不管输入多少个空格，都只能识别一个，所以我们通过下面的控制台来查看效果：</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-b1be011cde1431e7.png" alt="img"> </p>
<p> 如果想要去除数据首尾的空格，可以直接通过trim修饰符去除<strong>② 定义</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.trim</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>您输入的信息是:&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-b7e80e4fa56874cc.png" alt="img"> </p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21260932-5df82863611e4d9c.png" alt="img"> </p>
<p><strong>要注意的是，trim去除的是数据首尾的空格，并不包括中间的空格</strong>  </p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-计算属性</title>
    <url>/2020/03/05/Vue-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h1 id="一、计算属性：computed"><a href="#一、计算属性：computed" class="headerlink" title="一、计算属性：computed"></a>一、计算属性：computed</h1><p>为了让大家进一步的了解为什么使用计算属性，我们先来看下面的一个例子</p>
<a id="more"></a>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"warp"</span>&gt;</span><br><span class="line">          &#123;&#123; message.split(<span class="string">''</span>).reverse().<span class="keyword">join</span>(<span class="string">''</span>) &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">".warp"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">                message:<span class="string">"I Love Vue"</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在这里例子中，主要是将message的内容经过拆分然后反向输出。<br>  可以看到的是，我们将实现message内容反转输出的逻辑部分写在了View模板部分，这会造成以下两个问题：<br> <strong>① 维护难</strong>：设计View模板的初衷是用于简单运算的，如果在模板中放入太多的逻辑会让模板过重且难以维护；<br> <strong>② 不利于代码的重复利用</strong>：如果一个网页中需要多次翻转内容，那么就必须在每个地方书写一遍反转的逻辑代码<br>  因此，我们建议，将实现业务的逻辑部分放置在Vue实例中，而计算属性computed就是其中一个办法</p>
<h5 id="1-目的"><a href="#1-目的" class="headerlink" title="1.目的"></a>1.目的</h5><p>  用于处理复杂的逻辑，类似于JavaScript中函数的封装一样，将实现某个特定功能的代码块封装在一起。</p>
<h5 id="2-结构"><a href="#2-结构" class="headerlink" title="2.结构"></a>2.结构</h5><p>  computed和Vue实例中的methods方法结果类似，内部放置要实现的函数对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>原来数据：&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>新数据：&#123;&#123;reversemessage&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">".warp"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                message:<span class="string">"I Love Vue"</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            computed:&#123;</span><br><span class="line"><span class="actionscript">                reversemessage:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://img-blog.csdnimg.cn/20200514131014784.png" alt="在这里插入图片描述"> </p>
<p>  在这个例子中，原始数据的输入依旧在Vue实例的data中；不同的是业务的逻辑部分已经在Vue实例的computed计算属性中实现。首先是在computed内部<strong>声明了计算属性reversemessage</strong>，然后将提供的匿名函数将用作属性 vm.reverseMessage 的 <strong>getter 函数</strong>，最终用<strong>return返回相应的数据</strong>。<br>  和函数封装不一样的地方是，computed是<strong>有依赖的函数封装</strong>，例如本例中，<br> reversemessage属性会依赖message的变化而变化。<strong>以声明的方式创建了依赖关系</strong>。<br> 但是如果在表达式中调用方法来也可以达到同样的效果：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>原来数据：&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>新数据：&#123;&#123;reversemessage()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">".warp"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                message:<span class="string">"I Love Vue"</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line"><span class="actionscript">                reversemessage:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://img-blog.csdnimg.cn/20200514131014755.png" alt="在这里插入图片描述"> </p>
<p>这就是我们需要知道的另外一点：computed和methods的区别</p>
<h5 id="3-computed和methods的区别"><a href="#3-computed和methods的区别" class="headerlink" title="3.computed和methods的区别"></a>3.computed和methods的区别</h5><p><strong>① 调用</strong><br>  1.1 computed：调用computed时相当于调用一个<strong>属性</strong><br>  1.2 methods：调用methods时相当于调用一个<strong>方法</strong><br> <strong>② 缓存</strong><br>  2.1 computed：是<strong>依赖缓存</strong>的，即每次进入页面将一直沿用第一次的信息，信息是不随时间变化而变化的，这就是依赖缓存。（有延时的情况下 多次输出时间相同）。只有当<strong>相关依赖</strong>发生改变时才会重新取值呢 （所谓的相关依赖，就是比方说 reversedMessage function() 计算属性中调用了 message 变量）<br>  2.2 methods是<strong>实时</strong>的，在重新渲染时，函数总会重新调用执行，不会缓存<br> <strong>③ 性能</strong><br>  3.1 computed：相对来说computed的<strong>性能会比较好</strong>。比如A是一个很庞大的数组，每次遍历A需要多费一定的时间，而数据B会多次调用数组A来进行计算。如果不使用缓存，每次计算B的同时还要花费时间来遍历数组A；如果使用了缓存，子啊第一次遍历A的时候将相应的结果记录下来，每次计算B时直接从缓存A的空间读取A数组即可，而不必要每次都需要在遍历一遍数组A<br>  3.2 methods：如果你<strong>不希望缓存</strong>，你可以使用 methods 属性，即methods比较使用与<strong>实时切换</strong>的场合</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>    <span class="comment">&lt;!--computed计算属性--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;now&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;now&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> /&gt;</span>            <span class="comment">&lt;!--横线分割--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test2"</span>&gt;</span>   <span class="comment">&lt;!--methods方法，注意new（）加了括号--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;now()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;now()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//computed</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> myVue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">".test"</span>,</span></span><br><span class="line">            computed: &#123;</span><br><span class="line"><span class="actionscript">                now: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> yanshi = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">for</span>(<span class="keyword">var</span> o = <span class="number">0</span>; o &lt; <span class="number">2000</span>; o++) &#123;     <span class="comment">//延时</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">for</span>(<span class="keyword">var</span> q = <span class="number">0</span>; q &lt; <span class="number">2000</span>; q++) &#123;</span></span><br><span class="line">                            yanshi++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">Date</span>.now()</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript"><span class="comment">//methods</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vue2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'.test2'</span>,</span></span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="actionscript">                now: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> yanshi = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">for</span>(<span class="keyword">var</span> o = <span class="number">0</span>; o &lt; <span class="number">2000</span>; o++) &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">for</span>(<span class="keyword">var</span> q = <span class="number">0</span>; q &lt; <span class="number">2000</span>; q++) &#123;</span></span><br><span class="line">                            yanshi++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">Date</span>.now()</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p> <img src="https://img-blog.csdnimg.cn/20200514131014756.png" alt="在这里插入图片描述"> </p>
<p>由上图可知<br>  <strong>对于computed而言</strong>，一开始进入页面缓存的数据尾数是2055，所以每次进入页面将一直沿用第一次的信息，不会再触发now，说明computed是<strong>依赖缓存</strong>的；而<strong>只有当相关依赖发生变化时</strong>，缓存的信息才会再次改变。<br>  <strong>而对于methods而言</strong>，是<strong>实时变化</strong>的，所以两次返回的时间是不一样的。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue生命周期</title>
    <url>/2020/03/03/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h4 id="vue的生命周期是什么"><a href="#vue的生命周期是什么" class="headerlink" title="vue的生命周期是什么"></a><strong>vue的生命周期是什么</strong></h4><p>  vue每个组件都是独立的，每个组件都有一个属于它的生命周期，从一个组件<strong>创建、数据初始化、挂载、更新、销毁</strong>，这就是一个组件所谓的生命周期。在组件中具体的方法有:</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    beforeCreate</span><br><span class="line">    created</span><br><span class="line">    beforeMount</span><br><span class="line">    mounted</span><br><span class="line">    (</span><br><span class="line">        beforeUpdate</span><br><span class="line">        updated</span><br><span class="line">    )</span><br><span class="line">    beforeDestroy</span><br><span class="line">    destroyed</span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/13119812-eaf493b1b2050a93.png" alt="img"> </p>
<p><strong>vue中内置的方法 属性和vue生命周期的运行顺序（methods、computed、data、watch、props)</strong></p>
<p>  从第一二点可知道data的初始化是在created时已经完成数据观测(data observer)，并且诸如methods、computed属性 props等已经初始化；那问题来了，</p>
<p>data props computed watch methods他们之间的生成顺序是什么呢？</p>
<p>根据翻看vue源码可知：</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/13119812-551024dfb2fe9961.png" alt="img"> </p>
<p><strong>props =&gt; methods =&gt;data =&gt; computed =&gt; watch</strong>; 懂了没 </p>
<p><strong>vue生命周期的在项目中的执行顺序</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">data () &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">  rendered: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>beforeCeate()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.rendered);  <span class="comment">// undefined </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span>created() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);<span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.rendered); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span>beforeMount() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el)；<span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">4.</span>mounted() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/13119812-095add76ef7c1953.png" alt="img"> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">5.</span>beforeDestroty()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.rendered); </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/13119812-4980a396e64eee6e.png" alt="img"> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">6.</span>destroyed() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.rendered);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="https://upload-images.jianshu.io/upload_images/13119812-c8feee355871be70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/538/format/webp" alt="img"> </p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue的key关键字</title>
    <url>/2020/03/11/Vue%E7%9A%84key%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<h4 id="v-if中用-key-管理可复用的元素"><a href="#v-if中用-key-管理可复用的元素" class="headerlink" title="v-if中用 key 管理可复用的元素"></a>v-if中用 key 管理可复用的元素</h4><p>Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这么做，除了使 Vue 变得非常快之外，还有一些有用的好处。例如，如果你允许用户在不同的登录方式之间切换:</p>
<a id="more"></a>

<pre><code>&lt;template v-if=&quot;loginType === &apos;username&apos;&quot;&gt;  
  &lt;label&gt;Username&lt;/label&gt;  
  &lt;input placeholder=&quot;Enter your username&quot;&gt;  
&lt;/template&gt;  
&lt;template v-else&gt;  
  &lt;label&gt;Email&lt;/label&gt;  
  &lt;input placeholder=&quot;Enter your email address&quot;&gt;  
&lt;/template&gt;  </code></pre><p>那么在上面的代码中切换 loginType 将不会清除用户已经输入的内容。因为两个模版使用了相同的元素，<input> 不会被替换掉——仅仅是替换了它的 placeholder。<br>这样也不总是符合实际需求，所以 Vue 为你提供了一种方式来声明“这两个元素是完全独立的——不要复用它们”。只需添加一个具有唯一值的 key 属性即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template v-<span class="keyword">if</span>=<span class="string">"loginType === 'username'"</span>&gt;  </span><br><span class="line">  &lt;label&gt;Username&lt;<span class="regexp">/label&gt;  </span></span><br><span class="line"><span class="regexp">  &lt;input placeholder="Enter your username" key="username-input"&gt;  </span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;  </span><br><span class="line">&lt;template v-<span class="keyword">else</span>&gt;  </span><br><span class="line">  &lt;label&gt;Email&lt;<span class="regexp">/label&gt;  </span></span><br><span class="line"><span class="regexp">  &lt;input placeholder="Enter your email address" key="email-input"&gt;  </span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure>

<p>现在，每次切换时，输入框都将被重新渲染。注意, <label> 元素仍然会被高效地复用，因为它们没有添加 key 属性<br>2、v-for中的key</p>
<p>  当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “就地复用” 策略。如果数据项的顺序被改变，Vue将不是移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。这个类似 Vue 1.x 的 track-by=”$index” 。<br>  这个默认的模式是有效的，但是只适用于不依赖子组件状态或临时 DOM 状态（例如：表单输入值）的列表渲染输出。</p>
<p> 为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。理想的 key 值是每项都有唯一 id。这个特殊的属性相当于 Vue 1.x 的 track-by ，但它的工作方式类似于一个属性，所以你需要用 v-bind 来绑定动态值（在这里使用简写）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">"item in items"</span> :key=<span class="string">"item.id"</span>&gt;  <span class="comment">// key不能绑定index,因为index会改变</span></span><br><span class="line"><span class="comment">// key的出现就是为了提高性能  必须具备唯一性</span></span><br><span class="line">  &lt;!-- 内容 --&gt;  </span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
